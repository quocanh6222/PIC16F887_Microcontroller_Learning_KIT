CCS PCM C Compiler, Version 4.104, 5967               29-Nov-23 18:15

               Filename: D:\UNIVERSITY\NAM_4_2023_2024\HKI\DA_KTDK\CODE_TEST\UART\UART_ON_OFF_LED\ON_OFF_LED.lst

               ROM used: 110 words (1%)
                         Largest free fragment is 2048
               RAM used: 14 (4%) at main() level
                         14 (4%) worst case
               Stack:    1 worst case (0 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   043
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.5
001A:  GOTO   01D
001B:  BTFSC  0C.5
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   031
.................... #include <16f887.h>  
.................... //////// Standard Header file for the PIC16F887 device //////////////// 
.................... #device PIC16F887 
.................... #list 
....................  
.................... #include <def_887.h> 
.................... // register definitions 
....................  
.................... #define W 0 
.................... #define F 1 
....................  
.................... // register files 
.................... #byte INDF          =0x00 
.................... #byte TMR0          =0x01 
.................... #byte PCL           =0x02 
.................... #byte STATUS        =0x03 
.................... #byte FSR           =0x04 
.................... #byte PORTA         =0x05 
.................... #byte PORTB         =0x06 
.................... #byte PORTC         =0x07 
.................... #byte PORTD         =0x08 
.................... #byte PORTE         =0x09 
....................  
.................... #byte EEDATA        =0x10C 
.................... #byte EEADR         =0x10D 
.................... #byte EEDATH        =0x10E 
.................... #byte EEADRH         =0x10F 
.................... #byte ADCON0     =0x1F 
.................... #byte ADCON1     =0x9F 
.................... #byte ADRESH     =0x9F 
.................... #byte ADSESL     =0x9F 
....................  
.................... #byte PCLATH        =0x0a 
.................... #byte INTCON        =0x0b 
.................... #byte PIR1    =0x0c 
.................... #byte PIR2    =0x0d 
.................... #byte PIE1    =0x8c 
.................... #byte PIE2    =0x8d 
....................  
.................... #byte OPTION_REG    =0x81 
.................... #byte TRISA         =0x85 
.................... #byte TRISB         =0x86 
.................... #byte TRISC         =0x87 
.................... #byte TRISD         =0x88 
.................... #byte TRISE         =0x89 
....................  
.................... #byte EECON1        =0x18C 
.................... #byte EECON2        =0x18D 
....................  
.................... //DINH NGHIA BIT 
.................... #bit ra5   =0x05.5 
.................... #bit ra4   =0x05.4 
.................... #bit ra3   =0x05.3 
.................... #bit ra2   =0x05.2 
.................... #bit ra1   =0x05.1 
.................... #bit ra0   =0x05.0 
....................  
.................... #bit rb7   =0x06.7 
.................... #bit rb6   =0x06.6 
.................... #bit rb5   =0x06.5 
.................... #bit rb4   =0x06.4 
.................... #bit rb3   =0x06.3 
.................... #bit rb2   =0x06.2 
.................... #bit rb1   =0x06.1 
.................... #bit rb0   =0x06.0 
....................  
.................... #bit rC7   =0x07.7 
.................... #bit rC6   =0x07.6 
.................... #bit rC5   =0x07.5 
.................... #bit rC4   =0x07.4 
.................... #bit rC3   =0x07.3 
.................... #bit rC2   =0x07.2 
.................... #bit rC1   =0x07.1 
.................... #bit rC0   =0x07.0 
....................  
.................... #bit rD7   =0x08.7 
.................... #bit rD6   =0x08.6 
.................... #bit rD5   =0x08.5 
.................... #bit rD4   =0x08.4 
.................... #bit rD3   =0x08.3 
.................... #bit rD2   =0x08.2 
.................... #bit rD1   =0x08.1 
.................... #bit rD0   =0x08.0 
....................  
.................... #bit rE2   =0x09.2 
.................... #bit rE1   =0x09.1 
.................... #bit rE0   =0x09.0 
....................  
....................  
.................... #bit trisa5   =0x85.5 
.................... #bit trisa4   =0x85.4 
.................... #bit trisa3   =0x85.3 
.................... #bit trisa2   =0x85.2 
.................... #bit trisa1   =0x85.1 
.................... #bit trisa0   =0x85.0 
....................  
.................... #bit trisb7   =0x86.7 
.................... #bit trisb6   =0x86.6 
.................... #bit trisb5   =0x86.5 
.................... #bit trisb4   =0x86.4 
.................... #bit trisb3   =0x86.3 
.................... #bit trisb2   =0x86.2 
.................... #bit trisb1   =0x86.1 
.................... #bit trisb0   =0x86.0 
....................  
.................... #bit trisc7   =0x87.7 
.................... #bit trisc6   =0x87.6 
.................... #bit trisc5   =0x87.5 
.................... #bit trisc4   =0x87.4 
.................... #bit trisc3   =0x87.3 
.................... #bit trisc2   =0x87.2 
.................... #bit trisc1   =0x87.1 
.................... #bit trisc0   =0x87.0 
....................  
.................... #bit trisd7   =0x88.7 
.................... #bit trisd6   =0x88.6 
.................... #bit trisd5   =0x88.5 
.................... #bit trisd4   =0x88.4 
.................... #bit trisd3   =0x88.3 
.................... #bit trisd2   =0x88.2 
.................... #bit trisd1   =0x88.1 
.................... #bit trisd0   =0x88.0 
....................  
.................... #bit trise2   =0x89.2 
.................... #bit trise1   =0x89.1 
.................... #bit trise0   =0x89.0 
....................  
.................... // INTCON Bits for C 
.................... #bit gie    = 0x0b.7 
.................... #bit peie = 0x0b.6 
.................... #bit tmr0ie = 0x0b.5 
.................... #bit int0ie = 0x0b.4 
.................... #bit rbie   = 0x0b.3 
.................... #bit tmr0if    = 0x0b.2 
.................... #bit int0if    = 0x0b.1 
.................... #bit rbif    = 0x0b.0 
....................  
.................... // PIR1 for C 
.................... #bit pspif  = 0x0c.7 
.................... #bit adif    = 0x0c.6 
.................... #bit rcif    = 0x0c.5 
.................... #bit txif    = 0x0c.4 
.................... #bit sspif    = 0x0c.3 
.................... #bit ccp1if    = 0x0c.2 
.................... #bit tmr2if    = 0x0c.1 
.................... #bit tmr1if    = 0x0c.0 
....................  
.................... //PIR2 for C 
.................... #bit cmif    = 0x0d.6 
.................... #bit eeif    = 0x0d.4 
.................... #bit bclif  = 0x0d.3 
.................... #bit ccp2if    = 0x0d.0 
....................  
.................... // PIE1 for C 
.................... #bit adie    = 0x8c.6 
.................... #bit rcie    = 0x8c.5 
.................... #bit txie    = 0x8c.4 
.................... #bit sspie    = 0x8c.3 
.................... #bit ccp1ie    = 0x8c.2 
.................... #bit tmr2ie    = 0x8c.1 
.................... #bit tmr1ie    = 0x8c.0 
....................  
.................... //PIE2 for C 
.................... #bit osfie    = 0x8d.7 
.................... #bit cmie    = 0x8d.6 
.................... #bit eeie   = 0x8d.4 
....................  
.................... // OPTION Bits 
.................... #bit not_rbpu   = 0x81.7 
.................... #bit intedg     = 0x81.6 
.................... #bit t0cs       = 0x81.5 
.................... #bit t0se       = 0x81.4 
.................... #bit psa        = 0x81.3 
.................... #bit ps2        = 0x81.2 
.................... #bit ps1        = 0x81.1 
.................... #bit ps0        = 0x81.0 
....................  
.................... // EECON1 Bits 
.................... #bit eepgd   = 0x18c.7 
.................... #bit free      = 0x18C.4 
.................... #bit wrerr     = 0x18C.3 
.................... #bit wren       = 0x18C.2 
.................... #bit wr         = 0x18C.1 
.................... #bit rd         = 0x18C.0 
....................  
.................... //ADCON0 
.................... #bit CHS0    =0x1F.3 
.................... #bit CHS1    =0x1F.4 
.................... #bit CHS2    =0x1F.5 
....................  
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP 
.................... #use delay(clock=20000000)  
.................... #include <lcd_lib_4bit.c> 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... #define LCD_RS          PIN_D1 
.................... #define LCD_RW          PIN_D2 
.................... #define LCD_EN          PIN_D3 
....................  
.................... #define LCD_D4          PIN_D4 
.................... #define LCD_D5          PIN_D5 
.................... #define LCD_D6          PIN_D6 
.................... #define LCD_D7          PIN_D7 
....................  
.................... // misc display defines- 
.................... #define Line_1          0x80 
.................... #define Line_2          0xC0 
.................... #define Clear_Scr       0x01 
....................  
.................... // prototype statements 
.................... #separate void LCD_Init ( void );// ham khoi tao LCD 
.................... #separate void LCD_SetPosition ( unsigned int cX );//Thiet lap vi tri con tro 
.................... #separate void LCD_PutChar ( unsigned int cX );// Ham viet1kitu/1chuoi len LCD 
.................... #separate void LCD_PutCmd ( unsigned int cX) ;// Ham gui lenh len LCD 
.................... #separate void LCD_PulseEnable ( void );// Xung kich hoat 
.................... #separate void LCD_SetData ( unsigned int cX );// Dat du lieu len chan Data 
.................... // D/n Cong 
.................... #use standard_io (C) 
.................... #use standard_io (D) 
....................  
.................... //khoi tao LCD********************************************** 
.................... #separate void LCD_Init ( void ) 
....................     { 
....................     LCD_SetData ( 0x00 ); 
....................     delay_ms(200);       /* wait enough time after Vdd rise >> 15ms */ 
....................     output_low ( LCD_RS );// che do gui lenh 
....................     LCD_SetData ( 0x03 );   /* init with specific nibbles to start 4-bit mode */ 
....................     LCD_PulseEnable(); 
....................     LCD_PulseEnable(); 
....................     LCD_PulseEnable(); 
....................     LCD_SetData ( 0x02 );   /* set 4-bit interface */ 
....................     LCD_PulseEnable();      /* send dual nibbles hereafter, MSN first */ 
....................     LCD_PutCmd ( 0x2C );    /* function set (all lines, 5x7 characters) */ 
....................     LCD_PutCmd ( 0x0C );    /* display ON, cursor off, no blink */ 
....................     LCD_PutCmd ( 0x06 );    /* entry mode set, increment & scroll left */ 
....................     LCD_PutCmd ( 0x01 );    /* clear display */ 
....................     } 
....................  
.................... #separate void LCD_SetPosition ( unsigned int cX ) 
....................     { 
....................     /* this subroutine works specifically for 4-bit Port A */ 
....................     LCD_SetData ( swap ( cX ) | 0x08 ); 
....................     LCD_PulseEnable(); 
....................     LCD_SetData ( swap ( cX ) ); 
....................     LCD_PulseEnable(); 
....................     } 
....................  
.................... #separate void LCD_PutChar ( unsigned int cX ) 
....................     { 
....................     /* this subroutine works specifically for 4-bit Port A */ 
....................         output_high ( LCD_RS ); 
....................         LCD_PutCmd( cX ); 
....................         output_low ( LCD_RS ); 
....................     } 
....................  
.................... #separate void LCD_PutCmd ( unsigned int cX ) 
....................     { 
....................     /* this subroutine works specifically for 4-bit Port A */ 
....................     LCD_SetData ( swap ( cX ) );     /* send high nibble */ 
....................     LCD_PulseEnable(); 
....................     LCD_SetData ( swap ( cX ) );     /* send low nibble */ 
....................     LCD_PulseEnable(); 
....................     } 
.................... #separate void LCD_PulseEnable ( void ) 
....................     { 
....................     output_high ( LCD_EN ); 
....................     delay_us ( 3 );         // was 10 
....................     output_low ( LCD_EN ); 
....................     delay_ms ( 3 );         // was 5 
....................     } 
....................  
.................... #separate void LCD_SetData ( unsigned int cX ) 
....................     { 
....................     output_bit ( LCD_D4, cX & 0x01 ); 
....................     output_bit ( LCD_D5, cX & 0x02 ); 
....................     output_bit ( LCD_D6, cX & 0x04 ); 
....................     output_bit ( LCD_D7, cX & 0x08 ); 
....................     } 
....................  
.................... #use rs232(baud=115200,xmit=PIN_C6,rcv=PIN_C7)  
.................... char value1;//Bien luu du lieu 
.................... #int_RDA //Ngat RDA dung cho RS232 
.................... void RDA_interrupt(){  
.................... value1 = getc();//Doc cac ky tu nhan duoc va gan vao bien valuel 
*
0031:  BTFSS  0C.5
0032:  GOTO   031
0033:  MOVF   1A,W
0034:  MOVWF  28
.................... if (value1=='b')//Neu ky tu doc duoc la b thi port e muc 1 
0035:  MOVF   28,W
0036:  SUBLW  62
0037:  BTFSS  03.2
0038:  GOTO   03B
....................    PORTe=0xff;  
0039:  MOVLW  FF
003A:  MOVWF  09
.................... if (value1=='t')//Neu ky tu doc duoc la b thi port e muc 0 
003B:  MOVF   28,W
003C:  SUBLW  74
003D:  BTFSC  03.2
....................    PORTe=0x00; 
003E:  CLRF   09
.................... } 
003F:  BCF    0C.5
0040:  BCF    0A.3
0041:  BCF    0A.4
0042:  GOTO   01D
.................... void main() 
.................... { 
0043:  CLRF   04
0044:  BCF    03.7
0045:  MOVLW  1F
0046:  ANDWF  03,F
0047:  BSF    03.5
0048:  BSF    03.6
0049:  BSF    07.3
004A:  MOVLW  2A
004B:  BCF    03.6
004C:  MOVWF  19
004D:  MOVLW  00
004E:  MOVWF  1A
004F:  MOVLW  A6
0050:  MOVWF  18
0051:  MOVLW  90
0052:  BCF    03.5
0053:  MOVWF  18
0054:  BSF    03.5
0055:  BSF    03.6
0056:  MOVF   09,W
0057:  ANDLW  C0
0058:  MOVWF  09
0059:  BCF    03.6
005A:  BCF    1F.4
005B:  BCF    1F.5
005C:  MOVLW  00
005D:  BSF    03.6
005E:  MOVWF  08
005F:  BCF    03.5
0060:  CLRF   07
0061:  CLRF   08
0062:  CLRF   09
.................... trise=0x00; //Port E output 
*
0066:  BSF    03.5
0067:  CLRF   09
.................... ENABLE_INTERRUPTS(INT_RDA);//Cho phep ngat hoat dong 
0068:  BSF    0C.5
.................... enable_interrupts(GLOBAL);//bit cho phep ngat toan cuc (1) 
0069:  MOVLW  C0
006A:  BCF    03.5
006B:  IORWF  0B,F
.................... while (1){ 
.................... } 
006C:  GOTO   06C
.................... } 
006D:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   NOWRT BORV40
