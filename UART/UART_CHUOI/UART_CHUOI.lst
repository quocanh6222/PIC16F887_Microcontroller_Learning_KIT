CCS PCM C Compiler, Version 4.104, 5967               26-Nov-23 20:14

               Filename: D:\UNIVERSITY\NAM_4_2023_2024\HKI\DA_KTDK\CODE_TEST\UART\UART_CHUOI\UART_CHUOI.lst

               ROM used: 638 words (8%)
                         Largest free fragment is 2048
               RAM used: 21 (6%) at main() level
                         36 (10%) worst case
               Stack:    6 worst case (5 in main + 1 for interrupts)

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   24C
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.5
001A:  GOTO   01D
001B:  BTFSC  0C.5
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   039
.................... #include <16F877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #include <DEF877A.H>   
.................... // register definitions 
....................  
.................... #define W 0 
.................... #define F 1 
....................  
.................... // register files 
.................... #byte INDF          =0x00 
.................... #byte TMR0          =0x01 
.................... #byte PCL           =0x02 
.................... #byte STATUS        =0x03 
.................... #byte FSR           =0x04 
.................... #byte PORTA         =0x05 
.................... #byte PORTB         =0x06 
.................... #byte PORTC         =0x07 
.................... #byte PORTD         =0x08 
.................... #byte PORTE         =0x09 
....................  
.................... #byte EEDATA        =0x10C 
.................... #byte EEADR         =0x10D 
.................... #byte EEDATH        =0x10E 
.................... #byte EEADRH         =0x10F 
.................... #byte ADCON0 	 =0x1F 
.................... #byte ADCON1 	 =0x9F 
.................... #byte ADRESH 	 =0x9F 
.................... #byte ADSESL 	 =0x9F 
....................  
.................... #byte PCLATH        =0x0a 
.................... #byte INTCON        =0x0b 
.................... #byte PIR1 	=0x0c 
.................... #byte PIR2 	=0x0d 
.................... #byte PIE1 	=0x8c 
.................... #byte PIE2 	=0x8d 
....................  
.................... #byte OPTION_REG    =0x81 
.................... #byte TRISA         =0x85 
.................... #byte TRISB         =0x86 
.................... #byte TRISC         =0x87 
.................... #byte TRISD         =0x88 
.................... #byte TRISE         =0x89 
....................  
.................... #byte EECON1        =0x18C 
.................... #byte EECON2        =0x18D 
....................  
.................... //DINH NGHIA BIT 
.................... #bit ra5	=0x05.5 
.................... #bit ra4	=0x05.4 
.................... #bit ra3	=0x05.3 
.................... #bit ra2	=0x05.2 
.................... #bit ra1	=0x05.1 
.................... #bit ra0	=0x05.0 
....................  
.................... #bit rb7	=0x06.7 
.................... #bit rb6	=0x06.6 
.................... #bit rb5	=0x06.5 
.................... #bit rb4	=0x06.4 
.................... #bit rb3	=0x06.3 
.................... #bit rb2	=0x06.2 
.................... #bit rb1	=0x06.1 
.................... #bit rb0	=0x06.0 
....................  
.................... #bit rC7	=0x07.7 
.................... #bit rC6	=0x07.6 
.................... #bit rC5	=0x07.5 
.................... #bit rC4	=0x07.4 
.................... #bit rC3	=0x07.3 
.................... #bit rC2	=0x07.2 
.................... #bit rC1	=0x07.1 
.................... #bit rC0	=0x07.0 
....................  
.................... #bit rD7	=0x08.7 
.................... #bit rD6	=0x08.6 
.................... #bit rD5	=0x08.5 
.................... #bit rD4	=0x08.4 
.................... #bit rD3	=0x08.3 
.................... #bit rD2	=0x08.2 
.................... #bit rD1	=0x08.1 
.................... #bit rD0	=0x08.0 
....................  
.................... #bit rE2	=0x09.2 
.................... #bit rE1	=0x09.1 
.................... #bit rE0	=0x09.0 
....................  
....................  
.................... #bit trisa5	=0x85.5 
.................... #bit trisa4	=0x85.4 
.................... #bit trisa3	=0x85.3 
.................... #bit trisa2	=0x85.2 
.................... #bit trisa1	=0x85.1 
.................... #bit trisa0	=0x85.0 
....................  
.................... #bit trisb7	=0x86.7 
.................... #bit trisb6	=0x86.6 
.................... #bit trisb5	=0x86.5 
.................... #bit trisb4	=0x86.4 
.................... #bit trisb3	=0x86.3 
.................... #bit trisb2	=0x86.2 
.................... #bit trisb1	=0x86.1 
.................... #bit trisb0	=0x86.0 
....................  
.................... #bit trisc7	=0x87.7 
.................... #bit trisc6	=0x87.6 
.................... #bit trisc5	=0x87.5 
.................... #bit trisc4	=0x87.4 
.................... #bit trisc3	=0x87.3 
.................... #bit trisc2	=0x87.2 
.................... #bit trisc1	=0x87.1 
.................... #bit trisc0	=0x87.0 
....................  
.................... #bit trisd7	=0x88.7 
.................... #bit trisd6	=0x88.6 
.................... #bit trisd5	=0x88.5 
.................... #bit trisd4	=0x88.4 
.................... #bit trisd3	=0x88.3 
.................... #bit trisd2	=0x88.2 
.................... #bit trisd1	=0x88.1 
.................... #bit trisd0	=0x88.0 
....................  
.................... #bit trise2	=0x89.2 
.................... #bit trise1	=0x89.1 
.................... #bit trise0	=0x89.0 
....................  
.................... // INTCON Bits for C 
.................... #bit gie 	= 0x0b.7 
.................... #bit peie = 0x0b.6 
.................... #bit tmr0ie = 0x0b.5 
.................... #bit int0ie = 0x0b.4 
.................... #bit rbie	= 0x0b.3 
.................... #bit tmr0if    = 0x0b.2 
.................... #bit int0if    = 0x0b.1 
.................... #bit rbif    = 0x0b.0 
....................  
.................... // PIR1 for C 
.................... #bit pspif  = 0x0c.7 
.................... #bit adif    = 0x0c.6 
.................... #bit rcif    = 0x0c.5 
.................... #bit txif    = 0x0c.4 
.................... #bit sspif    = 0x0c.3 
.................... #bit ccp1if    = 0x0c.2 
.................... #bit tmr2if    = 0x0c.1 
.................... #bit tmr1if    = 0x0c.0 
....................  
.................... //PIR2 for C 
.................... #bit cmif    = 0x0d.6 
.................... #bit eeif    = 0x0d.4 
.................... #bit bclif  = 0x0d.3 
.................... #bit ccp2if    = 0x0d.0 
....................  
.................... // PIE1 for C 
.................... #bit adie    = 0x8c.6 
.................... #bit rcie    = 0x8c.5 
.................... #bit txie    = 0x8c.4 
.................... #bit sspie    = 0x8c.3 
.................... #bit ccp1ie    = 0x8c.2 
.................... #bit tmr2ie    = 0x8c.1 
.................... #bit tmr1ie    = 0x8c.0 
....................  
.................... //PIE2 for C 
.................... #bit osfie    = 0x8d.7 
.................... #bit cmie    = 0x8d.6 
.................... #bit eeie	= 0x8d.4 
....................  
.................... // OPTION Bits 
.................... #bit not_rbpu	= 0x81.7 
.................... #bit intedg     = 0x81.6 
.................... #bit t0cs       = 0x81.5 
.................... #bit t0se       = 0x81.4 
.................... #bit psa        = 0x81.3 
.................... #bit ps2        = 0x81.2 
.................... #bit ps1        = 0x81.1 
.................... #bit ps0        = 0x81.0 
....................  
.................... // EECON1 Bits 
.................... #bit eepgd	= 0x18c.7 
.................... #bit free   	= 0x18C.4 
.................... #bit wrerr  	= 0x18C.3 
.................... #bit wren    	= 0x18C.2 
.................... #bit wr      	= 0x18C.1 
.................... #bit rd      	= 0x18C.0 
....................  
.................... //ADCON0 
.................... #bit CHS0 	=0x1F.3 
.................... #bit CHS1 	=0x1F.4 
.................... #bit CHS2 	=0x1F.5 
....................  
.................... #fuses hs, nowdt, noprotect, nolvp, put, brownout 
.................... #use delay(clock=20000000)//Dung thach anh 20Mhz 
*
0047:  MOVLW  34
0048:  MOVWF  04
0049:  BCF    03.7
004A:  MOVF   00,W
004B:  BTFSC  03.2
004C:  GOTO   05A
004D:  MOVLW  06
004E:  MOVWF  78
004F:  CLRF   77
0050:  DECFSZ 77,F
0051:  GOTO   050
0052:  DECFSZ 78,F
0053:  GOTO   04F
0054:  MOVLW  7B
0055:  MOVWF  77
0056:  DECFSZ 77,F
0057:  GOTO   056
0058:  DECFSZ 00,F
0059:  GOTO   04D
005A:  RETURN
.................... #use i2c(Master,Fast=100000, sda=PIN_C4, scl=PIN_C3,force_sw) 
005B:  MOVLW  08
005C:  MOVWF  78
005D:  MOVLW  04
005E:  MOVWF  77
005F:  DECFSZ 77,F
0060:  GOTO   05F
0061:  BCF    07.3
0062:  BCF    27.3
0063:  MOVF   27,W
0064:  BSF    03.5
0065:  MOVWF  07
0066:  MOVLW  03
0067:  MOVWF  77
0068:  DECFSZ 77,F
0069:  GOTO   068
006A:  BCF    03.5
006B:  RLF    3E,F
006C:  BCF    07.4
006D:  BTFSS  03.0
006E:  GOTO   075
006F:  BSF    27.4
0070:  MOVF   27,W
0071:  BSF    03.5
0072:  MOVWF  07
0073:  GOTO   079
0074:  BCF    03.5
0075:  BCF    27.4
0076:  MOVF   27,W
0077:  BSF    03.5
0078:  MOVWF  07
0079:  NOP
007A:  BCF    03.5
007B:  BSF    27.3
007C:  MOVF   27,W
007D:  BSF    03.5
007E:  MOVWF  07
007F:  BCF    03.5
0080:  BTFSS  07.3
0081:  GOTO   080
0082:  DECFSZ 78,F
0083:  GOTO   05D
0084:  MOVLW  04
0085:  MOVWF  77
0086:  DECFSZ 77,F
0087:  GOTO   086
0088:  BCF    07.3
0089:  BCF    27.3
008A:  MOVF   27,W
008B:  BSF    03.5
008C:  MOVWF  07
008D:  NOP
008E:  BCF    03.5
008F:  BSF    27.4
0090:  MOVF   27,W
0091:  BSF    03.5
0092:  MOVWF  07
0093:  MOVLW  03
0094:  MOVWF  77
0095:  DECFSZ 77,F
0096:  GOTO   095
0097:  MOVLW  03
0098:  MOVWF  77
0099:  DECFSZ 77,F
009A:  GOTO   099
009B:  BCF    03.5
009C:  BSF    27.3
009D:  MOVF   27,W
009E:  BSF    03.5
009F:  MOVWF  07
00A0:  BCF    03.5
00A1:  BTFSS  07.3
00A2:  GOTO   0A1
00A3:  CLRF   78
00A4:  MOVLW  03
00A5:  MOVWF  77
00A6:  DECFSZ 77,F
00A7:  GOTO   0A6
00A8:  BTFSC  07.4
00A9:  BSF    78.0
00AA:  BCF    07.3
00AB:  BCF    27.3
00AC:  MOVF   27,W
00AD:  BSF    03.5
00AE:  MOVWF  07
00AF:  BCF    03.5
00B0:  BCF    07.4
00B1:  BCF    27.4
00B2:  MOVF   27,W
00B3:  BSF    03.5
00B4:  MOVWF  07
00B5:  BCF    03.5
00B6:  RETURN
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6, rcv=PIN_C7,bits=8) 
.................... #include <i2c_Flex_LCD.c> 
.................... //-----------------------------------------------------------------------------  
.................... // Title:         i2c_Flex_LCD  
.................... // Description:   Driver for common LCD with 1/2/3 or 4 rows by 1...20 columns  
.................... //                using PCF8574T interface board with I2C protocol.  
.................... // Date:          Nov-2013  
.................... // Ver.Rev.:      1.1  
.................... // Author:        Hugo Silva (sergio-hugo@bol.com.br) #Based on the routines of  
.................... //                "20X4_LCD_I2C_DRIVER.h" from Pumrin S. and "lcd4_i2c.c" from XP8100  
.................... //-----------------------------------------------------------------------------  
.................... //  
.................... // lcd_init() Must be called before any other function.  
.................... //  
.................... // lcd_putc(c) Will display c on the next position of the LCD.  
.................... //   
.................... //     \f Clear LCD display  
.................... //     \n Set write position on next lcd line  
.................... //     \b LCD backspace  
.................... //     lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)  
.................... //  
.................... // lcd_backlight_led(ON)/lcd_backlight_led(OFF) = Turn ON/OFF LCD Backlight LED  
.................... //  
.................... //-----------------------------------------------------------------------------  
.................... // LCD pins D0-D3 are not used.  
.................... //-----------------------------------------------------------------------------  
.................... //  
.................... // Comment   : Control of a compatible LCD (1...4 rows by 1...4 columns) from  
.................... //              a bus I2C with an EXPANDER of I/O with connection I2C.  
.................... //              The tests of these routines have been programmed using the IC  
.................... //              Phillips PCF8574T. I've used 4 bits mode programming.  
.................... //              The 8 bits mode programming is possible if you use 2 x PCF8574T.  
.................... //              RW Pin is not being used.  
.................... //  
.................... // As defined in the following structure the pin connection is as follows:  
.................... //  
.................... //  PCF8574P     LCD  
.................... //  ========     ======  
.................... //     P0        RS  
.................... //     P1        RW    (Not used!)  
.................... //     P2        Enable   
.................... //     P3        Led Backlight  
.................... //     P4        D4  
.................... //     P5        D5  
.................... //     P6        D6  
.................... //     P7        D7  
.................... //  
.................... //  The SCL and SDA pins should be pull-up resistor as shown below:  
.................... //  
.................... //             +5v  
.................... //               |  
.................... //               <  
.................... //               > 4.7K         
.................... //               <           
.................... //To PIC         |          To i2c slave  
.................... //pin xx ------------------ SDA pin   
.................... //(SDA)                       
.................... //              +5v  
.................... //               |  
.................... //               <  
.................... //               > 4.7K         
.................... //               <           
.................... //To PIC         |          To i2c slave  
.................... //pin xx ------------------ SCL pin   
.................... //(SCL)  
.................... //  
.................... //To PIC                    To i2c slave  
.................... //Vss pin ----------------- Vss or ground pin   
.................... //                |  
.................... //              -----  
.................... //               ---  Ground  
.................... //                -   
.................... //   
.................... // THIS DOCUMENT IS PROVIDED TO THE USER "AS IS"  
.................... //-----------------------------------------------------------------------------  
.................... byte LCD_ADDR ;//             0x4E        //I2C slave address for LCD module  
.................... byte lcd_total_rows ;//       2           //Number of rows: 1,2,3 or 4  
.................... byte lcd_total_columns ;//    16          //Number of columns: 1...20    
....................  
.................... #define RS                    0b00000001  //P0 - PCF8574T Pin connected to RS  
.................... #define RW                    0b00000010  //P1 - PCF8574T Pin connected to RW  
.................... #define ENABLE                0b00000100  //P2 - PCF8574T Pin connected to EN  
.................... #define LCD_BACKLIGHT         0b00001000  //P3 - PCF8574T Pin connected to BACKLIGHT LED  
....................  
.................... #define addr_row_one          0x00        //LCD RAM address for row 1  
.................... #define addr_row_two          0x40        //LCD RAM address for row 2  
.................... #define addr_row_three        0x14        //LCD RAM address for row 3  
.................... #define addr_row_four         0x54        //LCD RAM address for row 4  
....................  
.................... #define ON                    1  
.................... #define OFF                   0  
.................... #define NOT                   ~  
.................... #define data_shifted          data<<4  
.................... int8 new_row_request=1, BACKLIGHT_LED=LCD_BACKLIGHT;  
....................  
.................... void lcd_backlight_led(byte bl)  
.................... {   
....................       If (bl) BACKLIGHT_LED=LCD_BACKLIGHT; else BACKLIGHT_LED=OFF;  
*
01E4:  MOVF   30,F
01E5:  BTFSC  03.2
01E6:  GOTO   1EA
01E7:  MOVLW  08
01E8:  MOVWF  2C
01E9:  GOTO   1EB
01EA:  CLRF   2C
.................... }  
01EB:  BCF    0A.3
01EC:  BCF    0A.4
01ED:  GOTO   271 (RETURN)
....................  
.................... void i2c_send_nibble(byte data, byte type)  
.................... {     
....................    switch (type)  
....................    {       
*
00B7:  MOVF   3C,W
00B8:  XORLW  00
00B9:  BTFSC  03.2
00BA:  GOTO   0BF
00BB:  XORLW  01
00BC:  BTFSC  03.2
00BD:  GOTO   0E2
00BE:  GOTO   107
....................       case 0 :       
....................       i2c_write(data_shifted | BACKLIGHT_LED);  
00BF:  SWAPF  3B,W
00C0:  MOVWF  77
00C1:  MOVLW  F0
00C2:  ANDWF  77,F
00C3:  MOVF   77,W
00C4:  IORWF  2C,W
00C5:  MOVWF  3D
00C6:  MOVWF  3E
00C7:  CALL   05B
....................       delay_cycles(1);  
00C8:  NOP
....................       i2c_write(data_shifted | ENABLE | BACKLIGHT_LED );  
00C9:  SWAPF  3B,W
00CA:  MOVWF  77
00CB:  MOVLW  F0
00CC:  ANDWF  77,F
00CD:  MOVF   77,W
00CE:  IORLW  04
00CF:  IORWF  2C,W
00D0:  MOVWF  3D
00D1:  MOVWF  3E
00D2:  CALL   05B
....................       delay_us(2);  
00D3:  MOVLW  03
00D4:  MOVWF  77
00D5:  DECFSZ 77,F
00D6:  GOTO   0D5
....................       i2c_write(data_shifted & NOT ENABLE | BACKLIGHT_LED);  
00D7:  SWAPF  3B,W
00D8:  MOVWF  77
00D9:  MOVLW  F0
00DA:  ANDWF  77,F
00DB:  MOVF   77,W
00DC:  ANDLW  FB
00DD:  IORWF  2C,W
00DE:  MOVWF  3D
00DF:  MOVWF  3E
00E0:  CALL   05B
....................       break;  
00E1:  GOTO   107
....................        
....................       case 1 :  
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED);  
00E2:  SWAPF  3B,W
00E3:  MOVWF  77
00E4:  MOVLW  F0
00E5:  ANDWF  77,F
00E6:  MOVF   77,W
00E7:  IORLW  01
00E8:  IORWF  2C,W
00E9:  MOVWF  3D
00EA:  MOVWF  3E
00EB:  CALL   05B
....................       delay_cycles(1);  
00EC:  NOP
....................       i2c_write(data_shifted | RS | ENABLE | BACKLIGHT_LED );  
00ED:  SWAPF  3B,W
00EE:  MOVWF  77
00EF:  MOVLW  F0
00F0:  ANDWF  77,F
00F1:  MOVF   77,W
00F2:  IORLW  01
00F3:  IORLW  04
00F4:  IORWF  2C,W
00F5:  MOVWF  3D
00F6:  MOVWF  3E
00F7:  CALL   05B
....................       delay_us(2);  
00F8:  MOVLW  03
00F9:  MOVWF  77
00FA:  DECFSZ 77,F
00FB:  GOTO   0FA
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED);  
00FC:  SWAPF  3B,W
00FD:  MOVWF  77
00FE:  MOVLW  F0
00FF:  ANDWF  77,F
0100:  MOVF   77,W
0101:  IORLW  01
0102:  IORWF  2C,W
0103:  MOVWF  3D
0104:  MOVWF  3E
0105:  CALL   05B
....................       break;  
0106:  GOTO   107
....................    }  
.................... }  
0107:  RETURN
....................      
.................... void lcd_send_byte(byte data, byte type)  
....................    {  
....................         i2c_start();  
0108:  BSF    27.4
0109:  MOVF   27,W
010A:  BSF    03.5
010B:  MOVWF  07
010C:  MOVLW  04
010D:  MOVWF  77
010E:  DECFSZ 77,F
010F:  GOTO   10E
0110:  BCF    03.5
0111:  BSF    27.3
0112:  MOVF   27,W
0113:  BSF    03.5
0114:  MOVWF  07
0115:  MOVLW  03
0116:  MOVWF  77
0117:  DECFSZ 77,F
0118:  GOTO   117
0119:  BCF    03.5
011A:  BCF    07.4
011B:  BCF    27.4
011C:  MOVF   27,W
011D:  BSF    03.5
011E:  MOVWF  07
011F:  MOVLW  04
0120:  MOVWF  77
0121:  DECFSZ 77,F
0122:  GOTO   121
0123:  BCF    03.5
0124:  BCF    07.3
0125:  BCF    27.3
0126:  MOVF   27,W
0127:  BSF    03.5
0128:  MOVWF  07
....................         i2c_write(LCD_ADDR);  
0129:  BCF    03.5
012A:  MOVF   28,W
012B:  MOVWF  3E
012C:  CALL   05B
....................         i2c_send_nibble(data >> 4 , type);  
012D:  SWAPF  38,W
012E:  MOVWF  3A
012F:  MOVLW  0F
0130:  ANDWF  3A,F
0131:  MOVF   3A,W
0132:  MOVWF  3B
0133:  MOVF   39,W
0134:  MOVWF  3C
0135:  CALL   0B7
....................         i2c_send_nibble(data & 0xf , type);  
0136:  MOVF   38,W
0137:  ANDLW  0F
0138:  MOVWF  3A
0139:  MOVWF  3B
013A:  MOVF   39,W
013B:  MOVWF  3C
013C:  CALL   0B7
....................         i2c_stop();         
013D:  BCF    27.4
013E:  MOVF   27,W
013F:  BSF    03.5
0140:  MOVWF  07
0141:  NOP
0142:  BCF    03.5
0143:  BSF    27.3
0144:  MOVF   27,W
0145:  BSF    03.5
0146:  MOVWF  07
0147:  BCF    03.5
0148:  BTFSS  07.3
0149:  GOTO   148
014A:  MOVLW  04
014B:  MOVWF  77
014C:  DECFSZ 77,F
014D:  GOTO   14C
014E:  GOTO   14F
014F:  NOP
0150:  BSF    27.4
0151:  MOVF   27,W
0152:  BSF    03.5
0153:  MOVWF  07
0154:  MOVLW  04
0155:  MOVWF  77
0156:  DECFSZ 77,F
0157:  GOTO   156
....................    }  
0158:  BCF    03.5
0159:  RETURN
....................  
.................... void lcd_clear()  
.................... {   
....................         lcd_send_byte(0x01,0);  
015A:  MOVLW  01
015B:  MOVWF  38
015C:  CLRF   39
015D:  CALL   108
....................         delay_ms(2);  
015E:  MOVLW  02
015F:  MOVWF  34
0160:  CALL   047
....................         new_row_request=1;  
0161:  MOVLW  01
0162:  MOVWF  2B
.................... }  
0163:  RETURN
....................  
.................... void lcd_init(byte ADDR, byte col, byte row)  
.................... {  
....................    byte i; 
....................    byte CONST lcd_type=2;  // 0=5x7, 1=5x10, 2=2 lines  
....................    byte CONST LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; // These bytes need to be sent to the LCD to start it up. 
....................     
....................    LCD_ADDR =ADDR;//             0x4E        //I2C slave address for LCD module  
0164:  MOVF   30,W
0165:  MOVWF  28
....................    lcd_total_rows =row;//       2           //Number of rows: 1,2,3 or 4  
0166:  MOVF   32,W
0167:  MOVWF  29
....................    lcd_total_columns= col ; 
0168:  MOVF   31,W
0169:  MOVWF  2A
....................    disable_interrupts(GLOBAL);  
016A:  BCF    0B.6
016B:  BCF    0B.7
016C:  BTFSC  0B.7
016D:  GOTO   16B
....................    delay_ms(50); //LCD power up delay  
016E:  MOVLW  32
016F:  MOVWF  34
0170:  CALL   047
....................      
....................    i2c_start();  
0171:  BSF    27.4
0172:  MOVF   27,W
0173:  BSF    03.5
0174:  MOVWF  07
0175:  MOVLW  04
0176:  MOVWF  77
0177:  DECFSZ 77,F
0178:  GOTO   177
0179:  BCF    03.5
017A:  BSF    27.3
017B:  MOVF   27,W
017C:  BSF    03.5
017D:  MOVWF  07
017E:  MOVLW  03
017F:  MOVWF  77
0180:  DECFSZ 77,F
0181:  GOTO   180
0182:  BCF    03.5
0183:  BCF    07.4
0184:  BCF    27.4
0185:  MOVF   27,W
0186:  BSF    03.5
0187:  MOVWF  07
0188:  MOVLW  04
0189:  MOVWF  77
018A:  DECFSZ 77,F
018B:  GOTO   18A
018C:  BCF    03.5
018D:  BCF    07.3
018E:  BCF    27.3
018F:  MOVF   27,W
0190:  BSF    03.5
0191:  MOVWF  07
....................    i2c_write(LCD_ADDR);  
0192:  BCF    03.5
0193:  MOVF   28,W
0194:  MOVWF  3E
0195:  CALL   05B
....................       i2c_send_nibble(0x00,0);  
0196:  CLRF   3B
0197:  CLRF   3C
0198:  CALL   0B7
....................       delay_ms(15);  
0199:  MOVLW  0F
019A:  MOVWF  34
019B:  CALL   047
....................      
....................    for (i=1;i<=3;++i)     
019C:  MOVLW  01
019D:  MOVWF  33
019E:  MOVF   33,W
019F:  SUBLW  03
01A0:  BTFSS  03.0
01A1:  GOTO   1AB
....................    {  
....................       i2c_send_nibble(0x03,0);  
01A2:  MOVLW  03
01A3:  MOVWF  3B
01A4:  CLRF   3C
01A5:  CALL   0B7
....................       delay_ms(5);  
01A6:  MOVLW  05
01A7:  MOVWF  34
01A8:  CALL   047
....................    }     
01A9:  INCF   33,F
01AA:  GOTO   19E
....................       i2c_send_nibble(0x02,0);  
01AB:  MOVLW  02
01AC:  MOVWF  3B
01AD:  CLRF   3C
01AE:  CALL   0B7
....................       delay_ms(5);  
01AF:  MOVLW  05
01B0:  MOVWF  34
01B1:  CALL   047
....................    i2c_stop();  
01B2:  BCF    27.4
01B3:  MOVF   27,W
01B4:  BSF    03.5
01B5:  MOVWF  07
01B6:  NOP
01B7:  BCF    03.5
01B8:  BSF    27.3
01B9:  MOVF   27,W
01BA:  BSF    03.5
01BB:  MOVWF  07
01BC:  BCF    03.5
01BD:  BTFSS  07.3
01BE:  GOTO   1BD
01BF:  MOVLW  04
01C0:  MOVWF  77
01C1:  DECFSZ 77,F
01C2:  GOTO   1C1
01C3:  GOTO   1C4
01C4:  NOP
01C5:  BSF    27.4
01C6:  MOVF   27,W
01C7:  BSF    03.5
01C8:  MOVWF  07
01C9:  MOVLW  04
01CA:  MOVWF  77
01CB:  DECFSZ 77,F
01CC:  GOTO   1CB
....................      
....................    for (i=0;i<=3;++i) {  
01CD:  BCF    03.5
01CE:  CLRF   33
01CF:  MOVF   33,W
01D0:  SUBLW  03
01D1:  BTFSS  03.0
01D2:  GOTO   1DE
....................    lcd_send_byte(LCD_INIT_STRING[i],0);  
01D3:  MOVF   33,W
01D4:  CALL   031
01D5:  MOVWF  34
01D6:  MOVWF  38
01D7:  CLRF   39
01D8:  CALL   108
....................    delay_ms(5);  
01D9:  MOVLW  05
01DA:  MOVWF  34
01DB:  CALL   047
....................    }  
01DC:  INCF   33,F
01DD:  GOTO   1CF
....................    lcd_clear();  //Clear Display  
01DE:  CALL   15A
....................    enable_interrupts(GLOBAL);  
01DF:  MOVLW  C0
01E0:  IORWF  0B,F
.................... }  
01E1:  BCF    0A.3
01E2:  BCF    0A.4
01E3:  GOTO   26E (RETURN)
....................  
.................... void lcd_gotoxy( byte x, byte y)  
.................... {  
.................... byte row,column,row_addr,lcd_address;  
.................... static char data;  
*
0266:  CLRF   2D
....................  
....................    if (y>lcd_total_rows) row=lcd_total_rows; else row=y;  
*
0206:  MOVF   32,W
0207:  SUBWF  29,W
0208:  BTFSC  03.0
0209:  GOTO   20D
020A:  MOVF   29,W
020B:  MOVWF  33
020C:  GOTO   20F
020D:  MOVF   32,W
020E:  MOVWF  33
....................    
....................    switch(row)  
....................    {  
020F:  MOVF   33,W
0210:  XORLW  01
0211:  BTFSC  03.2
0212:  GOTO   21D
0213:  XORLW  03
0214:  BTFSC  03.2
0215:  GOTO   21F
0216:  XORLW  01
0217:  BTFSC  03.2
0218:  GOTO   222
0219:  XORLW  07
021A:  BTFSC  03.2
021B:  GOTO   225
021C:  GOTO   228
....................       case 1:  row_addr=addr_row_one;     break;  
021D:  CLRF   35
021E:  GOTO   22A
....................       case 2:  row_addr=addr_row_two;     break;  
021F:  MOVLW  40
0220:  MOVWF  35
0221:  GOTO   22A
....................       case 3:  row_addr=addr_row_three;   break;  
0222:  MOVLW  14
0223:  MOVWF  35
0224:  GOTO   22A
....................       case 4:  row_addr=addr_row_four;    break;  
0225:  MOVLW  54
0226:  MOVWF  35
0227:  GOTO   22A
....................       default: row_addr=addr_row_one;     break;   
0228:  CLRF   35
0229:  GOTO   22A
....................    }   
....................      
....................    if (x>lcd_total_columns) column=lcd_total_columns; else column=x;   
022A:  MOVF   31,W
022B:  SUBWF  2A,W
022C:  BTFSC  03.0
022D:  GOTO   231
022E:  MOVF   2A,W
022F:  MOVWF  34
0230:  GOTO   233
0231:  MOVF   31,W
0232:  MOVWF  34
....................    lcd_address=(row_addr+(column-1));  
0233:  MOVLW  01
0234:  SUBWF  34,W
0235:  ADDWF  35,W
0236:  MOVWF  36
....................    lcd_send_byte(0x80|lcd_address,0);  
0237:  MOVF   36,W
0238:  IORLW  80
0239:  MOVWF  37
023A:  MOVWF  38
023B:  CLRF   39
023C:  CALL   108
.................... }  
....................  
.................... //Display the character on LCD screen.  
.................... void LCD_PUTC(char in_data)  
.................... {     
....................   switch(in_data)  
....................    {   
*
01EE:  MOVF   30,W
01EF:  XORLW  0C
01F0:  BTFSC  03.2
01F1:  GOTO   1F9
01F2:  XORLW  06
01F3:  BTFSC  03.2
01F4:  GOTO   1FB
01F5:  XORLW  02
01F6:  BTFSC  03.2
01F7:  GOTO   23E
01F8:  GOTO   243
....................      case '\f': lcd_clear();                       break;                 
01F9:  CALL   15A
01FA:  GOTO   249
....................        
....................      case '\n':  
....................      new_row_request++;  
01FB:  INCF   2B,F
....................      if (new_row_request>lcd_total_rows) new_row_request=1;  
01FC:  MOVF   2B,W
01FD:  SUBWF  29,W
01FE:  BTFSC  03.0
01FF:  GOTO   202
0200:  MOVLW  01
0201:  MOVWF  2B
....................      lcd_gotoxy(1, new_row_request);  
0202:  MOVLW  01
0203:  MOVWF  31
0204:  MOVF   2B,W
0205:  MOVWF  32
....................      break;  
*
023D:  GOTO   249
....................                    
....................      case '\b': lcd_send_byte(0x10,0);             break;  
023E:  MOVLW  10
023F:  MOVWF  38
0240:  CLRF   39
0241:  CALL   108
0242:  GOTO   249
....................          
....................      default: lcd_send_byte(in_data,1);            break;       
0243:  MOVF   30,W
0244:  MOVWF  38
0245:  MOVLW  01
0246:  MOVWF  39
0247:  CALL   108
0248:  GOTO   249
....................        
....................    }  
.................... }  
0249:  BCF    0A.3
024A:  BCF    0A.4
024B:  GOTO   27C (RETURN)
....................  
.................... char chuoi;  
.................... int i; 
.................... #int_rda 
.................... void serial_isr() 
.................... { 
....................    chuoi=getc(); 
*
0039:  BTFSS  0C.5
003A:  GOTO   039
003B:  MOVF   1A,W
003C:  MOVWF  2E
....................    putc(chuoi); 
003D:  MOVF   2E,W
003E:  BTFSS  0C.4
003F:  GOTO   03E
0040:  MOVWF  19
....................    i=1;    
0041:  MOVLW  01
0042:  MOVWF  2F
.................... } 
0043:  BCF    0C.5
0044:  BCF    0A.3
0045:  BCF    0A.4
0046:  GOTO   01D
.................... void main() { 
*
024C:  CLRF   04
024D:  BCF    03.7
024E:  MOVLW  1F
024F:  ANDWF  03,F
0250:  MOVLW  81
0251:  BSF    03.5
0252:  MOVWF  19
0253:  MOVLW  A6
0254:  MOVWF  18
0255:  MOVLW  90
0256:  BCF    03.5
0257:  MOVWF  18
0258:  MOVLW  01
0259:  MOVWF  2B
025A:  MOVLW  08
025B:  MOVWF  2C
025C:  BSF    03.5
025D:  BSF    1F.0
025E:  BSF    1F.1
025F:  BSF    1F.2
0260:  BCF    1F.3
0261:  MOVLW  07
0262:  MOVWF  1C
....................    lcd_init(0x4E,16,2);  //khoi dong lcd dia chi 0x4E 
*
0267:  MOVLW  4E
0268:  MOVWF  30
0269:  MOVLW  10
026A:  MOVWF  31
026B:  MOVLW  02
026C:  MOVWF  32
026D:  GOTO   164
....................    lcd_backlight_led(ON); //bat led nen lcd 
026E:  MOVLW  01
026F:  MOVWF  30
0270:  GOTO   1E4
....................    enable_interrupts(global); 
0271:  MOVLW  C0
0272:  IORWF  0B,F
....................    enable_interrupts(int_rda); 
0273:  BSF    03.5
0274:  BSF    0C.5
.................... while(1)  
....................   { 
....................    if(i==1) 
0275:  BCF    03.5
0276:  DECFSZ 2F,W
0277:  GOTO   27C
....................       {  
....................         i=0;  
0278:  CLRF   2F
....................         printf(lcd_putc,"%c",chuoi);  
0279:  MOVF   2E,W
027A:  MOVWF  30
027B:  GOTO   1EE
....................       }   
....................   } 
027C:  GOTO   276
.................... } 
027D:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
