CCS PCM C Compiler, Version 4.104, 5967               13-Nov-23 12:56

               Filename: D:\UNIVERSITY\NAM_4_2023_2024\HKI\DA_KTDK\CODE_TEST\UART\UART_Slave.lst

               ROM used: 710 words (9%)
                         Largest free fragment is 2048
               RAM used: 14 (4%) at main() level
                         38 (10%) worst case
               Stack:    6 locations

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   276
0003:  NOP
.................... #include <16f877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #include <def_877a.h> 
.................... // register definitions 
....................  
.................... #define W 0 
.................... #define F 1 
....................  
.................... // register files 
.................... #byte INDF          =0x00 
.................... #byte TMR0          =0x01 
.................... #byte PCL           =0x02 
.................... #byte STATUS        =0x03 
.................... #byte FSR           =0x04 
.................... #byte PORTA         =0x05 
.................... #byte PORTB         =0x06 
.................... #byte PORTC         =0x07 
.................... #byte PORTD         =0x08 
.................... #byte PORTE         =0x09 
....................  
.................... #byte EEDATA        =0x10C 
.................... #byte EEADR         =0x10D 
.................... #byte EEDATH        =0x10E 
.................... #byte EEADRH         =0x10F 
.................... #byte ADCON0 	 =0x1F 
.................... #byte ADCON1 	 =0x9F 
.................... #byte ADRESH 	 =0x9F 
.................... #byte ADSESL 	 =0x9F 
....................  
.................... #byte PCLATH        =0x0a 
.................... #byte INTCON        =0x0b 
.................... #byte PIR1 	=0x0c 
.................... #byte PIR2 	=0x0d 
.................... #byte PIE1 	=0x8c 
.................... #byte PIE2 	=0x8d 
....................  
.................... #byte OPTION_REG    =0x81 
.................... #byte TRISA         =0x85 
.................... #byte TRISB         =0x86 
.................... #byte TRISC         =0x87 
.................... #byte TRISD         =0x88 
.................... #byte TRISE         =0x89 
....................  
.................... #byte EECON1        =0x18C 
.................... #byte EECON2        =0x18D 
....................  
.................... //DINH NGHIA BIT 
.................... #bit ra5	=0x05.5 
.................... #bit ra4	=0x05.4 
.................... #bit ra3	=0x05.3 
.................... #bit ra2	=0x05.2 
.................... #bit ra1	=0x05.1 
.................... #bit ra0	=0x05.0 
....................  
.................... #bit rb7	=0x06.7 
.................... #bit rb6	=0x06.6 
.................... #bit rb5	=0x06.5 
.................... #bit rb4	=0x06.4 
.................... #bit rb3	=0x06.3 
.................... #bit rb2	=0x06.2 
.................... #bit rb1	=0x06.1 
.................... #bit rb0	=0x06.0 
....................  
.................... #bit rC7	=0x07.7 
.................... #bit rC6	=0x07.6 
.................... #bit rC5	=0x07.5 
.................... #bit rC4	=0x07.4 
.................... #bit rC3	=0x07.3 
.................... #bit rC2	=0x07.2 
.................... #bit rC1	=0x07.1 
.................... #bit rC0	=0x07.0 
....................  
.................... #bit rD7	=0x08.7 
.................... #bit rD6	=0x08.6 
.................... #bit rD5	=0x08.5 
.................... #bit rD4	=0x08.4 
.................... #bit rD3	=0x08.3 
.................... #bit rD2	=0x08.2 
.................... #bit rD1	=0x08.1 
.................... #bit rD0	=0x08.0 
....................  
.................... #bit rE2	=0x09.2 
.................... #bit rE1	=0x09.1 
.................... #bit rE0	=0x09.0 
....................  
....................  
.................... #bit trisa5	=0x85.5 
.................... #bit trisa4	=0x85.4 
.................... #bit trisa3	=0x85.3 
.................... #bit trisa2	=0x85.2 
.................... #bit trisa1	=0x85.1 
.................... #bit trisa0	=0x85.0 
....................  
.................... #bit trisb7	=0x86.7 
.................... #bit trisb6	=0x86.6 
.................... #bit trisb5	=0x86.5 
.................... #bit trisb4	=0x86.4 
.................... #bit trisb3	=0x86.3 
.................... #bit trisb2	=0x86.2 
.................... #bit trisb1	=0x86.1 
.................... #bit trisb0	=0x86.0 
....................  
.................... #bit trisc7	=0x87.7 
.................... #bit trisc6	=0x87.6 
.................... #bit trisc5	=0x87.5 
.................... #bit trisc4	=0x87.4 
.................... #bit trisc3	=0x87.3 
.................... #bit trisc2	=0x87.2 
.................... #bit trisc1	=0x87.1 
.................... #bit trisc0	=0x87.0 
....................  
.................... #bit trisd7	=0x88.7 
.................... #bit trisd6	=0x88.6 
.................... #bit trisd5	=0x88.5 
.................... #bit trisd4	=0x88.4 
.................... #bit trisd3	=0x88.3 
.................... #bit trisd2	=0x88.2 
.................... #bit trisd1	=0x88.1 
.................... #bit trisd0	=0x88.0 
....................  
.................... #bit trise2	=0x89.2 
.................... #bit trise1	=0x89.1 
.................... #bit trise0	=0x89.0 
....................  
.................... // INTCON Bits for C 
.................... #bit gie 	= 0x0b.7 
.................... #bit peie = 0x0b.6 
.................... #bit tmr0ie = 0x0b.5 
.................... #bit int0ie = 0x0b.4 
.................... #bit rbie	= 0x0b.3 
.................... #bit tmr0if    = 0x0b.2 
.................... #bit int0if    = 0x0b.1 
.................... #bit rbif    = 0x0b.0 
....................  
.................... // PIR1 for C 
.................... #bit pspif  = 0x0c.7 
.................... #bit adif    = 0x0c.6 
.................... #bit rcif    = 0x0c.5 
.................... #bit txif    = 0x0c.4 
.................... #bit sspif    = 0x0c.3 
.................... #bit ccp1if    = 0x0c.2 
.................... #bit tmr2if    = 0x0c.1 
.................... #bit tmr1if    = 0x0c.0 
....................  
.................... //PIR2 for C 
.................... #bit cmif    = 0x0d.6 
.................... #bit eeif    = 0x0d.4 
.................... #bit bclif  = 0x0d.3 
.................... #bit ccp2if    = 0x0d.0 
....................  
.................... // PIE1 for C 
.................... #bit adie    = 0x8c.6 
.................... #bit rcie    = 0x8c.5 
.................... #bit txie    = 0x8c.4 
.................... #bit sspie    = 0x8c.3 
.................... #bit ccp1ie    = 0x8c.2 
.................... #bit tmr2ie    = 0x8c.1 
.................... #bit tmr1ie    = 0x8c.0 
....................  
.................... //PIE2 for C 
.................... #bit osfie    = 0x8d.7 
.................... #bit cmie    = 0x8d.6 
.................... #bit eeie	= 0x8d.4 
....................  
.................... // OPTION Bits 
.................... #bit not_rbpu	= 0x81.7 
.................... #bit intedg     = 0x81.6 
.................... #bit t0cs       = 0x81.5 
.................... #bit t0se       = 0x81.4 
.................... #bit psa        = 0x81.3 
.................... #bit ps2        = 0x81.2 
.................... #bit ps1        = 0x81.1 
.................... #bit ps0        = 0x81.0 
....................  
.................... // EECON1 Bits 
.................... #bit eepgd	= 0x18c.7 
.................... #bit free   	= 0x18C.4 
.................... #bit wrerr  	= 0x18C.3 
.................... #bit wren    	= 0x18C.2 
.................... #bit wr      	= 0x18C.1 
.................... #bit rd      	= 0x18C.0 
....................  
.................... //ADCON0 
.................... #bit CHS0 	=0x1F.3 
.................... #bit CHS1 	=0x1F.4 
.................... #bit CHS2 	=0x1F.5 
....................  
.................... #FUSES NOWDT, HS, PUT, NOPROTECT, 
.................... #use DELAY(clock=20000000) 
*
000C:  MOVLW  33
000D:  MOVWF  04
000E:  BCF    03.7
000F:  MOVF   00,W
0010:  BTFSC  03.2
0011:  GOTO   01F
0012:  MOVLW  06
0013:  MOVWF  78
0014:  CLRF   77
0015:  DECFSZ 77,F
0016:  GOTO   015
0017:  DECFSZ 78,F
0018:  GOTO   014
0019:  MOVLW  7B
001A:  MOVWF  77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 00,F
001E:  GOTO   012
001F:  RETURN
.................... #use i2c(Master,Fast=100000, sda=PIN_C4, scl=PIN_C3,force_sw) 
0020:  MOVLW  08
0021:  MOVWF  78
0022:  MOVLW  04
0023:  MOVWF  77
0024:  DECFSZ 77,F
0025:  GOTO   024
0026:  BCF    07.3
0027:  BCF    20.3
0028:  MOVF   20,W
0029:  BSF    03.5
002A:  MOVWF  07
002B:  MOVLW  03
002C:  MOVWF  77
002D:  DECFSZ 77,F
002E:  GOTO   02D
002F:  BCF    03.5
0030:  RLF    40,F
0031:  BCF    07.4
0032:  BTFSS  03.0
0033:  GOTO   03A
0034:  BSF    20.4
0035:  MOVF   20,W
0036:  BSF    03.5
0037:  MOVWF  07
0038:  GOTO   03E
0039:  BCF    03.5
003A:  BCF    20.4
003B:  MOVF   20,W
003C:  BSF    03.5
003D:  MOVWF  07
003E:  NOP
003F:  BCF    03.5
0040:  BSF    20.3
0041:  MOVF   20,W
0042:  BSF    03.5
0043:  MOVWF  07
0044:  BCF    03.5
0045:  BTFSS  07.3
0046:  GOTO   045
0047:  DECFSZ 78,F
0048:  GOTO   022
0049:  MOVLW  04
004A:  MOVWF  77
004B:  DECFSZ 77,F
004C:  GOTO   04B
004D:  BCF    07.3
004E:  BCF    20.3
004F:  MOVF   20,W
0050:  BSF    03.5
0051:  MOVWF  07
0052:  NOP
0053:  BCF    03.5
0054:  BSF    20.4
0055:  MOVF   20,W
0056:  BSF    03.5
0057:  MOVWF  07
0058:  MOVLW  03
0059:  MOVWF  77
005A:  DECFSZ 77,F
005B:  GOTO   05A
005C:  MOVLW  03
005D:  MOVWF  77
005E:  DECFSZ 77,F
005F:  GOTO   05E
0060:  BCF    03.5
0061:  BSF    20.3
0062:  MOVF   20,W
0063:  BSF    03.5
0064:  MOVWF  07
0065:  BCF    03.5
0066:  BTFSS  07.3
0067:  GOTO   066
0068:  CLRF   78
0069:  MOVLW  03
006A:  MOVWF  77
006B:  DECFSZ 77,F
006C:  GOTO   06B
006D:  BTFSC  07.4
006E:  BSF    78.0
006F:  BCF    07.3
0070:  BCF    20.3
0071:  MOVF   20,W
0072:  BSF    03.5
0073:  MOVWF  07
0074:  BCF    03.5
0075:  BCF    07.4
0076:  BCF    20.4
0077:  MOVF   20,W
0078:  BSF    03.5
0079:  MOVWF  07
007A:  BCF    03.5
007B:  RETURN
.................... #use rs232(baud=9600,xmit=pin_c6,rcv=pin_c7)  
.................... #include <i2c_Flex_LCD.c> 
.................... //-----------------------------------------------------------------------------  
.................... // Title:         i2c_Flex_LCD  
.................... // Description:   Driver for common LCD with 1/2/3 or 4 rows by 1...20 columns  
.................... //                using PCF8574T interface board with I2C protocol.  
.................... // Date:          Nov-2013  
.................... // Ver.Rev.:      1.1  
.................... // Author:        Hugo Silva (sergio-hugo@bol.com.br) #Based on the routines of  
.................... //                "20X4_LCD_I2C_DRIVER.h" from Pumrin S. and "lcd4_i2c.c" from XP8100  
.................... //-----------------------------------------------------------------------------  
.................... //  
.................... // lcd_init() Must be called before any other function.  
.................... //  
.................... // lcd_putc(c) Will display c on the next position of the LCD.  
.................... //   
.................... //     \f Clear LCD display  
.................... //     \n Set write position on next lcd line  
.................... //     \b LCD backspace  
.................... //     lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)  
.................... //  
.................... // lcd_backlight_led(ON)/lcd_backlight_led(OFF) = Turn ON/OFF LCD Backlight LED  
.................... //  
.................... //-----------------------------------------------------------------------------  
.................... // LCD pins D0-D3 are not used.  
.................... //-----------------------------------------------------------------------------  
.................... //  
.................... // Comment   : Control of a compatible LCD (1...4 rows by 1...4 columns) from  
.................... //              a bus I2C with an EXPANDER of I/O with connection I2C.  
.................... //              The tests of these routines have been programmed using the IC  
.................... //              Phillips PCF8574T. I've used 4 bits mode programming.  
.................... //              The 8 bits mode programming is possible if you use 2 x PCF8574T.  
.................... //              RW Pin is not being used.  
.................... //  
.................... // As defined in the following structure the pin connection is as follows:  
.................... //  
.................... //  PCF8574P     LCD  
.................... //  ========     ======  
.................... //     P0        RS  
.................... //     P1        RW    (Not used!)  
.................... //     P2        Enable   
.................... //     P3        Led Backlight  
.................... //     P4        D4  
.................... //     P5        D5  
.................... //     P6        D6  
.................... //     P7        D7  
.................... //  
.................... //  The SCL and SDA pins should be pull-up resistor as shown below:  
.................... //  
.................... //             +5v  
.................... //               |  
.................... //               <  
.................... //               > 4.7K         
.................... //               <           
.................... //To PIC         |          To i2c slave  
.................... //pin xx ------------------ SDA pin   
.................... //(SDA)                       
.................... //              +5v  
.................... //               |  
.................... //               <  
.................... //               > 4.7K         
.................... //               <           
.................... //To PIC         |          To i2c slave  
.................... //pin xx ------------------ SCL pin   
.................... //(SCL)  
.................... //  
.................... //To PIC                    To i2c slave  
.................... //Vss pin ----------------- Vss or ground pin   
.................... //                |  
.................... //              -----  
.................... //               ---  Ground  
.................... //                -   
.................... //   
.................... // THIS DOCUMENT IS PROVIDED TO THE USER "AS IS"  
.................... //-----------------------------------------------------------------------------  
.................... byte LCD_ADDR ;//             0x4E        //I2C slave address for LCD module  
.................... byte lcd_total_rows ;//       2           //Number of rows: 1,2,3 or 4  
.................... byte lcd_total_columns ;//    16          //Number of columns: 1...20    
....................  
.................... #define RS                    0b00000001  //P0 - PCF8574T Pin connected to RS  
.................... #define RW                    0b00000010  //P1 - PCF8574T Pin connected to RW  
.................... #define ENABLE                0b00000100  //P2 - PCF8574T Pin connected to EN  
.................... #define LCD_BACKLIGHT         0b00001000  //P3 - PCF8574T Pin connected to BACKLIGHT LED  
....................  
.................... #define addr_row_one          0x00        //LCD RAM address for row 1  
.................... #define addr_row_two          0x40        //LCD RAM address for row 2  
.................... #define addr_row_three        0x14        //LCD RAM address for row 3  
.................... #define addr_row_four         0x54        //LCD RAM address for row 4  
....................  
.................... #define ON                    1  
.................... #define OFF                   0  
.................... #define NOT                   ~  
.................... #define data_shifted          data<<4  
.................... int8 new_row_request=1, BACKLIGHT_LED=LCD_BACKLIGHT;  
....................  
.................... void lcd_backlight_led(byte bl)  
.................... {   
....................       If (bl) BACKLIGHT_LED=LCD_BACKLIGHT; else BACKLIGHT_LED=OFF;  
*
01A9:  MOVF   29,F
01AA:  BTFSC  03.2
01AB:  GOTO   1AF
01AC:  MOVLW  08
01AD:  MOVWF  25
01AE:  GOTO   1B0
01AF:  CLRF   25
.................... }  
01B0:  BCF    0A.3
01B1:  BCF    0A.4
01B2:  GOTO   29B (RETURN)
....................  
.................... void i2c_send_nibble(byte data, byte type)  
.................... {     
....................    switch (type)  
....................    {       
*
007C:  MOVF   3E,W
007D:  XORLW  00
007E:  BTFSC  03.2
007F:  GOTO   084
0080:  XORLW  01
0081:  BTFSC  03.2
0082:  GOTO   0A7
0083:  GOTO   0CC
....................       case 0 :       
....................       i2c_write(data_shifted | BACKLIGHT_LED);  
0084:  SWAPF  3D,W
0085:  MOVWF  77
0086:  MOVLW  F0
0087:  ANDWF  77,F
0088:  MOVF   77,W
0089:  IORWF  25,W
008A:  MOVWF  3F
008B:  MOVWF  40
008C:  CALL   020
....................       delay_cycles(1);  
008D:  NOP
....................       i2c_write(data_shifted | ENABLE | BACKLIGHT_LED );  
008E:  SWAPF  3D,W
008F:  MOVWF  77
0090:  MOVLW  F0
0091:  ANDWF  77,F
0092:  MOVF   77,W
0093:  IORLW  04
0094:  IORWF  25,W
0095:  MOVWF  3F
0096:  MOVWF  40
0097:  CALL   020
....................       delay_us(2);  
0098:  MOVLW  03
0099:  MOVWF  77
009A:  DECFSZ 77,F
009B:  GOTO   09A
....................       i2c_write(data_shifted & NOT ENABLE | BACKLIGHT_LED);  
009C:  SWAPF  3D,W
009D:  MOVWF  77
009E:  MOVLW  F0
009F:  ANDWF  77,F
00A0:  MOVF   77,W
00A1:  ANDLW  FB
00A2:  IORWF  25,W
00A3:  MOVWF  3F
00A4:  MOVWF  40
00A5:  CALL   020
....................       break;  
00A6:  GOTO   0CC
....................        
....................       case 1 :  
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED);  
00A7:  SWAPF  3D,W
00A8:  MOVWF  77
00A9:  MOVLW  F0
00AA:  ANDWF  77,F
00AB:  MOVF   77,W
00AC:  IORLW  01
00AD:  IORWF  25,W
00AE:  MOVWF  3F
00AF:  MOVWF  40
00B0:  CALL   020
....................       delay_cycles(1);  
00B1:  NOP
....................       i2c_write(data_shifted | RS | ENABLE | BACKLIGHT_LED );  
00B2:  SWAPF  3D,W
00B3:  MOVWF  77
00B4:  MOVLW  F0
00B5:  ANDWF  77,F
00B6:  MOVF   77,W
00B7:  IORLW  01
00B8:  IORLW  04
00B9:  IORWF  25,W
00BA:  MOVWF  3F
00BB:  MOVWF  40
00BC:  CALL   020
....................       delay_us(2);  
00BD:  MOVLW  03
00BE:  MOVWF  77
00BF:  DECFSZ 77,F
00C0:  GOTO   0BF
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED);  
00C1:  SWAPF  3D,W
00C2:  MOVWF  77
00C3:  MOVLW  F0
00C4:  ANDWF  77,F
00C5:  MOVF   77,W
00C6:  IORLW  01
00C7:  IORWF  25,W
00C8:  MOVWF  3F
00C9:  MOVWF  40
00CA:  CALL   020
....................       break;  
00CB:  GOTO   0CC
....................    }  
.................... }  
00CC:  RETURN
....................      
.................... void lcd_send_byte(byte data, byte type)  
....................    {  
....................         i2c_start();  
00CD:  BSF    20.4
00CE:  MOVF   20,W
00CF:  BSF    03.5
00D0:  MOVWF  07
00D1:  MOVLW  04
00D2:  MOVWF  77
00D3:  DECFSZ 77,F
00D4:  GOTO   0D3
00D5:  BCF    03.5
00D6:  BSF    20.3
00D7:  MOVF   20,W
00D8:  BSF    03.5
00D9:  MOVWF  07
00DA:  MOVLW  03
00DB:  MOVWF  77
00DC:  DECFSZ 77,F
00DD:  GOTO   0DC
00DE:  BCF    03.5
00DF:  BCF    07.4
00E0:  BCF    20.4
00E1:  MOVF   20,W
00E2:  BSF    03.5
00E3:  MOVWF  07
00E4:  MOVLW  04
00E5:  MOVWF  77
00E6:  DECFSZ 77,F
00E7:  GOTO   0E6
00E8:  BCF    03.5
00E9:  BCF    07.3
00EA:  BCF    20.3
00EB:  MOVF   20,W
00EC:  BSF    03.5
00ED:  MOVWF  07
....................         i2c_write(LCD_ADDR);  
00EE:  BCF    03.5
00EF:  MOVF   21,W
00F0:  MOVWF  40
00F1:  CALL   020
....................         i2c_send_nibble(data >> 4 , type);  
00F2:  SWAPF  3A,W
00F3:  MOVWF  3C
00F4:  MOVLW  0F
00F5:  ANDWF  3C,F
00F6:  MOVF   3C,W
00F7:  MOVWF  3D
00F8:  MOVF   3B,W
00F9:  MOVWF  3E
00FA:  CALL   07C
....................         i2c_send_nibble(data & 0xf , type);  
00FB:  MOVF   3A,W
00FC:  ANDLW  0F
00FD:  MOVWF  3C
00FE:  MOVWF  3D
00FF:  MOVF   3B,W
0100:  MOVWF  3E
0101:  CALL   07C
....................         i2c_stop();         
0102:  BCF    20.4
0103:  MOVF   20,W
0104:  BSF    03.5
0105:  MOVWF  07
0106:  NOP
0107:  BCF    03.5
0108:  BSF    20.3
0109:  MOVF   20,W
010A:  BSF    03.5
010B:  MOVWF  07
010C:  BCF    03.5
010D:  BTFSS  07.3
010E:  GOTO   10D
010F:  MOVLW  04
0110:  MOVWF  77
0111:  DECFSZ 77,F
0112:  GOTO   111
0113:  GOTO   114
0114:  NOP
0115:  BSF    20.4
0116:  MOVF   20,W
0117:  BSF    03.5
0118:  MOVWF  07
0119:  MOVLW  04
011A:  MOVWF  77
011B:  DECFSZ 77,F
011C:  GOTO   11B
....................    }  
011D:  BCF    03.5
011E:  RETURN
....................  
.................... void lcd_clear()  
.................... {   
....................         lcd_send_byte(0x01,0);  
011F:  MOVLW  01
0120:  MOVWF  3A
0121:  CLRF   3B
0122:  CALL   0CD
....................         delay_ms(2);  
0123:  MOVLW  02
0124:  MOVWF  33
0125:  CALL   00C
....................         new_row_request=1;  
0126:  MOVLW  01
0127:  MOVWF  24
.................... }  
0128:  RETURN
....................  
.................... void lcd_init(byte ADDR, byte col, byte row)  
.................... {  
....................    byte i; 
....................    byte CONST lcd_type=2;  // 0=5x7, 1=5x10, 2=2 lines  
....................    byte CONST LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; // These bytes need to be sent to the LCD to start it up. 
....................     
....................    LCD_ADDR =ADDR;//             0x4E        //I2C slave address for LCD module  
0129:  MOVF   29,W
012A:  MOVWF  21
....................    lcd_total_rows =row;//       2           //Number of rows: 1,2,3 or 4  
012B:  MOVF   2B,W
012C:  MOVWF  22
....................    lcd_total_columns= col ; 
012D:  MOVF   2A,W
012E:  MOVWF  23
....................    disable_interrupts(GLOBAL);  
012F:  BCF    0B.6
0130:  BCF    0B.7
0131:  BTFSC  0B.7
0132:  GOTO   130
....................    delay_ms(50); //LCD power up delay  
0133:  MOVLW  32
0134:  MOVWF  33
0135:  CALL   00C
....................      
....................    i2c_start();  
0136:  BSF    20.4
0137:  MOVF   20,W
0138:  BSF    03.5
0139:  MOVWF  07
013A:  MOVLW  04
013B:  MOVWF  77
013C:  DECFSZ 77,F
013D:  GOTO   13C
013E:  BCF    03.5
013F:  BSF    20.3
0140:  MOVF   20,W
0141:  BSF    03.5
0142:  MOVWF  07
0143:  MOVLW  03
0144:  MOVWF  77
0145:  DECFSZ 77,F
0146:  GOTO   145
0147:  BCF    03.5
0148:  BCF    07.4
0149:  BCF    20.4
014A:  MOVF   20,W
014B:  BSF    03.5
014C:  MOVWF  07
014D:  MOVLW  04
014E:  MOVWF  77
014F:  DECFSZ 77,F
0150:  GOTO   14F
0151:  BCF    03.5
0152:  BCF    07.3
0153:  BCF    20.3
0154:  MOVF   20,W
0155:  BSF    03.5
0156:  MOVWF  07
....................    i2c_write(LCD_ADDR);  
0157:  BCF    03.5
0158:  MOVF   21,W
0159:  MOVWF  40
015A:  CALL   020
....................       i2c_send_nibble(0x00,0);  
015B:  CLRF   3D
015C:  CLRF   3E
015D:  CALL   07C
....................       delay_ms(15);  
015E:  MOVLW  0F
015F:  MOVWF  33
0160:  CALL   00C
....................      
....................    for (i=1;i<=3;++i)     
0161:  MOVLW  01
0162:  MOVWF  2C
0163:  MOVF   2C,W
0164:  SUBLW  03
0165:  BTFSS  03.0
0166:  GOTO   170
....................    {  
....................       i2c_send_nibble(0x03,0);  
0167:  MOVLW  03
0168:  MOVWF  3D
0169:  CLRF   3E
016A:  CALL   07C
....................       delay_ms(5);  
016B:  MOVLW  05
016C:  MOVWF  33
016D:  CALL   00C
....................    }     
016E:  INCF   2C,F
016F:  GOTO   163
....................       i2c_send_nibble(0x02,0);  
0170:  MOVLW  02
0171:  MOVWF  3D
0172:  CLRF   3E
0173:  CALL   07C
....................       delay_ms(5);  
0174:  MOVLW  05
0175:  MOVWF  33
0176:  CALL   00C
....................    i2c_stop();  
0177:  BCF    20.4
0178:  MOVF   20,W
0179:  BSF    03.5
017A:  MOVWF  07
017B:  NOP
017C:  BCF    03.5
017D:  BSF    20.3
017E:  MOVF   20,W
017F:  BSF    03.5
0180:  MOVWF  07
0181:  BCF    03.5
0182:  BTFSS  07.3
0183:  GOTO   182
0184:  MOVLW  04
0185:  MOVWF  77
0186:  DECFSZ 77,F
0187:  GOTO   186
0188:  GOTO   189
0189:  NOP
018A:  BSF    20.4
018B:  MOVF   20,W
018C:  BSF    03.5
018D:  MOVWF  07
018E:  MOVLW  04
018F:  MOVWF  77
0190:  DECFSZ 77,F
0191:  GOTO   190
....................      
....................    for (i=0;i<=3;++i) {  
0192:  BCF    03.5
0193:  CLRF   2C
0194:  MOVF   2C,W
0195:  SUBLW  03
0196:  BTFSS  03.0
0197:  GOTO   1A3
....................    lcd_send_byte(LCD_INIT_STRING[i],0);  
0198:  MOVF   2C,W
0199:  CALL   004
019A:  MOVWF  2D
019B:  MOVWF  3A
019C:  CLRF   3B
019D:  CALL   0CD
....................    delay_ms(5);  
019E:  MOVLW  05
019F:  MOVWF  33
01A0:  CALL   00C
....................    }  
01A1:  INCF   2C,F
01A2:  GOTO   194
....................    lcd_clear();  //Clear Display  
01A3:  CALL   11F
....................    enable_interrupts(GLOBAL);  
01A4:  MOVLW  C0
01A5:  IORWF  0B,F
.................... }  
01A6:  BCF    0A.3
01A7:  BCF    0A.4
01A8:  GOTO   298 (RETURN)
....................  
.................... void lcd_gotoxy( byte x, byte y)  
.................... {  
.................... byte row,column,row_addr,lcd_address;  
.................... static char data;  
*
0290:  CLRF   26
....................  
....................    if (y>lcd_total_rows) row=lcd_total_rows; else row=y;  
*
01B3:  MOVF   34,W
01B4:  SUBWF  22,W
01B5:  BTFSC  03.0
01B6:  GOTO   1BA
01B7:  MOVF   22,W
01B8:  MOVWF  35
01B9:  GOTO   1BC
01BA:  MOVF   34,W
01BB:  MOVWF  35
....................    
....................    switch(row)  
....................    {  
01BC:  MOVF   35,W
01BD:  XORLW  01
01BE:  BTFSC  03.2
01BF:  GOTO   1CA
01C0:  XORLW  03
01C1:  BTFSC  03.2
01C2:  GOTO   1CC
01C3:  XORLW  01
01C4:  BTFSC  03.2
01C5:  GOTO   1CF
01C6:  XORLW  07
01C7:  BTFSC  03.2
01C8:  GOTO   1D2
01C9:  GOTO   1D5
....................       case 1:  row_addr=addr_row_one;     break;  
01CA:  CLRF   37
01CB:  GOTO   1D7
....................       case 2:  row_addr=addr_row_two;     break;  
01CC:  MOVLW  40
01CD:  MOVWF  37
01CE:  GOTO   1D7
....................       case 3:  row_addr=addr_row_three;   break;  
01CF:  MOVLW  14
01D0:  MOVWF  37
01D1:  GOTO   1D7
....................       case 4:  row_addr=addr_row_four;    break;  
01D2:  MOVLW  54
01D3:  MOVWF  37
01D4:  GOTO   1D7
....................       default: row_addr=addr_row_one;     break;   
01D5:  CLRF   37
01D6:  GOTO   1D7
....................    }   
....................      
....................    if (x>lcd_total_columns) column=lcd_total_columns; else column=x;   
01D7:  MOVF   33,W
01D8:  SUBWF  23,W
01D9:  BTFSC  03.0
01DA:  GOTO   1DE
01DB:  MOVF   23,W
01DC:  MOVWF  36
01DD:  GOTO   1E0
01DE:  MOVF   33,W
01DF:  MOVWF  36
....................    lcd_address=(row_addr+(column-1));  
01E0:  MOVLW  01
01E1:  SUBWF  36,W
01E2:  ADDWF  37,W
01E3:  MOVWF  38
....................    lcd_send_byte(0x80|lcd_address,0);  
01E4:  MOVF   38,W
01E5:  IORLW  80
01E6:  MOVWF  39
01E7:  MOVWF  3A
01E8:  CLRF   3B
01E9:  CALL   0CD
.................... }  
01EA:  RETURN
....................  
.................... //Display the character on LCD screen.  
.................... void LCD_PUTC(char in_data)  
.................... {     
....................   switch(in_data)  
....................    {   
01EB:  MOVF   32,W
01EC:  XORLW  0C
01ED:  BTFSC  03.2
01EE:  GOTO   1F6
01EF:  XORLW  06
01F0:  BTFSC  03.2
01F1:  GOTO   1F8
01F2:  XORLW  02
01F3:  BTFSC  03.2
01F4:  GOTO   205
01F5:  GOTO   20A
....................      case '\f': lcd_clear();                       break;                 
01F6:  CALL   11F
01F7:  GOTO   210
....................        
....................      case '\n':  
....................      new_row_request++;  
01F8:  INCF   24,F
....................      if (new_row_request>lcd_total_rows) new_row_request=1;  
01F9:  MOVF   24,W
01FA:  SUBWF  22,W
01FB:  BTFSC  03.0
01FC:  GOTO   1FF
01FD:  MOVLW  01
01FE:  MOVWF  24
....................      lcd_gotoxy(1, new_row_request);  
01FF:  MOVLW  01
0200:  MOVWF  33
0201:  MOVF   24,W
0202:  MOVWF  34
0203:  CALL   1B3
....................      break;  
0204:  GOTO   210
....................                    
....................      case '\b': lcd_send_byte(0x10,0);             break;  
0205:  MOVLW  10
0206:  MOVWF  3A
0207:  CLRF   3B
0208:  CALL   0CD
0209:  GOTO   210
....................          
....................      default: lcd_send_byte(in_data,1);            break;       
020A:  MOVF   32,W
020B:  MOVWF  3A
020C:  MOVLW  01
020D:  MOVWF  3B
020E:  CALL   0CD
020F:  GOTO   210
....................        
....................    }  
.................... }  
0210:  RETURN
....................  
....................  
.................... int16 RDATA; 
....................  
.................... void main() 
.................... { 
*
0276:  CLRF   04
0277:  BCF    03.7
0278:  MOVLW  1F
0279:  ANDWF  03,F
027A:  MOVLW  81
027B:  BSF    03.5
027C:  MOVWF  19
027D:  MOVLW  A6
027E:  MOVWF  18
027F:  MOVLW  90
0280:  BCF    03.5
0281:  MOVWF  18
0282:  MOVLW  01
0283:  MOVWF  24
0284:  MOVLW  08
0285:  MOVWF  25
0286:  BSF    03.5
0287:  BSF    1F.0
0288:  BSF    1F.1
0289:  BSF    1F.2
028A:  BCF    1F.3
028B:  MOVLW  07
028C:  MOVWF  1C
....................  lcd_init(0x4E,16,2);  //khoi dong lcd dia chi 0x4E 
*
0291:  MOVLW  4E
0292:  MOVWF  29
0293:  MOVLW  10
0294:  MOVWF  2A
0295:  MOVLW  02
0296:  MOVWF  2B
0297:  GOTO   129
....................    lcd_backlight_led(ON); //bat led nen lcd 
0298:  MOVLW  01
0299:  MOVWF  29
029A:  GOTO   1A9
....................     
.................... while(true) 
.................... {  
....................    if(kbhit())  
029B:  BTFSS  0C.5
029C:  GOTO   2C4
....................       {  
....................       RDATA = getch();    
029D:  BTFSS  0C.5
029E:  GOTO   29D
029F:  MOVF   1A,W
02A0:  CLRF   28
02A1:  MOVWF  27
....................       lcd_gotoxy(1, 1); 
02A2:  MOVLW  01
02A3:  MOVWF  33
02A4:  MOVWF  34
02A5:  CALL   1B3
....................       delay_ms(100); 
02A6:  MOVLW  64
02A7:  MOVWF  33
02A8:  CALL   00C
....................       printf(lcd_putc, "ADC"); 
02A9:  MOVLW  41
02AA:  MOVWF  32
02AB:  CALL   1EB
02AC:  MOVLW  44
02AD:  MOVWF  32
02AE:  CALL   1EB
02AF:  MOVLW  43
02B0:  MOVWF  32
02B1:  CALL   1EB
....................       lcd_gotoxy(1, 2); 
02B2:  MOVLW  01
02B3:  MOVWF  33
02B4:  MOVLW  02
02B5:  MOVWF  34
02B6:  CALL   1B3
....................       printf(lcd_putc,"%04Lu " , RDATA ); 
02B7:  MOVLW  09
02B8:  MOVWF  04
02B9:  MOVF   28,W
02BA:  MOVWF  2A
02BB:  MOVF   27,W
02BC:  MOVWF  29
02BD:  GOTO   211
02BE:  MOVLW  20
02BF:  MOVWF  32
02C0:  CALL   1EB
....................       delay_ms(100); 
02C1:  MOVLW  64
02C2:  MOVWF  33
02C3:  CALL   00C
....................  
....................       } 
.................... } 
02C4:  GOTO   29B
.................... } 
02C5:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
