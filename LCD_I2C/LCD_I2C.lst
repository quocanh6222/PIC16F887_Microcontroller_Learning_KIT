CCS PCM C Compiler, Version 4.104, 5967               16-Nov-23 14:29

               Filename: D:\UNIVERSITY\NAM_4_2023_2024\HKI\DA_KTDK\CODE_TEST\LCD_I2C\LCD_I2C.lst

               ROM used: 672 words (8%)
                         Largest free fragment is 2048
               RAM used: 12 (3%) at main() level
                         30 (8%) worst case
               Stack:    6 locations

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   265
0003:  NOP
.................... #include <16F877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #include <DEF877A.H> 
.................... // register definitions 
....................  
.................... #define W 0 
.................... #define F 1 
....................  
.................... // register files 
.................... #byte INDF          =0x00 
.................... #byte TMR0          =0x01 
.................... #byte PCL           =0x02 
.................... #byte STATUS        =0x03 
.................... #byte FSR           =0x04 
.................... #byte PORTA         =0x05 
.................... #byte PORTB         =0x06 
.................... #byte PORTC         =0x07 
.................... #byte PORTD         =0x08 
.................... #byte PORTE         =0x09 
....................  
.................... #byte EEDATA        =0x10C 
.................... #byte EEADR         =0x10D 
.................... #byte EEDATH        =0x10E 
.................... #byte EEADRH         =0x10F 
.................... #byte ADCON0 	 =0x1F 
.................... #byte ADCON1 	 =0x9F 
.................... #byte ADRESH 	 =0x9F 
.................... #byte ADSESL 	 =0x9F 
....................  
.................... #byte PCLATH        =0x0a 
.................... #byte INTCON        =0x0b 
.................... #byte PIR1 	=0x0c 
.................... #byte PIR2 	=0x0d 
.................... #byte PIE1 	=0x8c 
.................... #byte PIE2 	=0x8d 
....................  
.................... #byte OPTION_REG    =0x81 
.................... #byte TRISA         =0x85 
.................... #byte TRISB         =0x86 
.................... #byte TRISC         =0x87 
.................... #byte TRISD         =0x88 
.................... #byte TRISE         =0x89 
....................  
.................... #byte EECON1        =0x18C 
.................... #byte EECON2        =0x18D 
....................  
.................... //DINH NGHIA BIT 
.................... #bit ra5	=0x05.5 
.................... #bit ra4	=0x05.4 
.................... #bit ra3	=0x05.3 
.................... #bit ra2	=0x05.2 
.................... #bit ra1	=0x05.1 
.................... #bit ra0	=0x05.0 
....................  
.................... #bit rb7	=0x06.7 
.................... #bit rb6	=0x06.6 
.................... #bit rb5	=0x06.5 
.................... #bit rb4	=0x06.4 
.................... #bit rb3	=0x06.3 
.................... #bit rb2	=0x06.2 
.................... #bit rb1	=0x06.1 
.................... #bit rb0	=0x06.0 
....................  
.................... #bit rC7	=0x07.7 
.................... #bit rC6	=0x07.6 
.................... #bit rC5	=0x07.5 
.................... #bit rC4	=0x07.4 
.................... #bit rC3	=0x07.3 
.................... #bit rC2	=0x07.2 
.................... #bit rC1	=0x07.1 
.................... #bit rC0	=0x07.0 
....................  
.................... #bit rD7	=0x08.7 
.................... #bit rD6	=0x08.6 
.................... #bit rD5	=0x08.5 
.................... #bit rD4	=0x08.4 
.................... #bit rD3	=0x08.3 
.................... #bit rD2	=0x08.2 
.................... #bit rD1	=0x08.1 
.................... #bit rD0	=0x08.0 
....................  
.................... #bit rE2	=0x09.2 
.................... #bit rE1	=0x09.1 
.................... #bit rE0	=0x09.0 
....................  
....................  
.................... #bit trisa5	=0x85.5 
.................... #bit trisa4	=0x85.4 
.................... #bit trisa3	=0x85.3 
.................... #bit trisa2	=0x85.2 
.................... #bit trisa1	=0x85.1 
.................... #bit trisa0	=0x85.0 
....................  
.................... #bit trisb7	=0x86.7 
.................... #bit trisb6	=0x86.6 
.................... #bit trisb5	=0x86.5 
.................... #bit trisb4	=0x86.4 
.................... #bit trisb3	=0x86.3 
.................... #bit trisb2	=0x86.2 
.................... #bit trisb1	=0x86.1 
.................... #bit trisb0	=0x86.0 
....................  
.................... #bit trisc7	=0x87.7 
.................... #bit trisc6	=0x87.6 
.................... #bit trisc5	=0x87.5 
.................... #bit trisc4	=0x87.4 
.................... #bit trisc3	=0x87.3 
.................... #bit trisc2	=0x87.2 
.................... #bit trisc1	=0x87.1 
.................... #bit trisc0	=0x87.0 
....................  
.................... #bit trisd7	=0x88.7 
.................... #bit trisd6	=0x88.6 
.................... #bit trisd5	=0x88.5 
.................... #bit trisd4	=0x88.4 
.................... #bit trisd3	=0x88.3 
.................... #bit trisd2	=0x88.2 
.................... #bit trisd1	=0x88.1 
.................... #bit trisd0	=0x88.0 
....................  
.................... #bit trise2	=0x89.2 
.................... #bit trise1	=0x89.1 
.................... #bit trise0	=0x89.0 
....................  
.................... // INTCON Bits for C 
.................... #bit gie 	= 0x0b.7 
.................... #bit peie = 0x0b.6 
.................... #bit tmr0ie = 0x0b.5 
.................... #bit int0ie = 0x0b.4 
.................... #bit rbie	= 0x0b.3 
.................... #bit tmr0if    = 0x0b.2 
.................... #bit int0if    = 0x0b.1 
.................... #bit rbif    = 0x0b.0 
....................  
.................... // PIR1 for C 
.................... #bit pspif  = 0x0c.7 
.................... #bit adif    = 0x0c.6 
.................... #bit rcif    = 0x0c.5 
.................... #bit txif    = 0x0c.4 
.................... #bit sspif    = 0x0c.3 
.................... #bit ccp1if    = 0x0c.2 
.................... #bit tmr2if    = 0x0c.1 
.................... #bit tmr1if    = 0x0c.0 
....................  
.................... //PIR2 for C 
.................... #bit cmif    = 0x0d.6 
.................... #bit eeif    = 0x0d.4 
.................... #bit bclif  = 0x0d.3 
.................... #bit ccp2if    = 0x0d.0 
....................  
.................... // PIE1 for C 
.................... #bit adie    = 0x8c.6 
.................... #bit rcie    = 0x8c.5 
.................... #bit txie    = 0x8c.4 
.................... #bit sspie    = 0x8c.3 
.................... #bit ccp1ie    = 0x8c.2 
.................... #bit tmr2ie    = 0x8c.1 
.................... #bit tmr1ie    = 0x8c.0 
....................  
.................... //PIE2 for C 
.................... #bit osfie    = 0x8d.7 
.................... #bit cmie    = 0x8d.6 
.................... #bit eeie	= 0x8d.4 
....................  
.................... // OPTION Bits 
.................... #bit not_rbpu	= 0x81.7 
.................... #bit intedg     = 0x81.6 
.................... #bit t0cs       = 0x81.5 
.................... #bit t0se       = 0x81.4 
.................... #bit psa        = 0x81.3 
.................... #bit ps2        = 0x81.2 
.................... #bit ps1        = 0x81.1 
.................... #bit ps0        = 0x81.0 
....................  
.................... // EECON1 Bits 
.................... #bit eepgd	= 0x18c.7 
.................... #bit free   	= 0x18C.4 
.................... #bit wrerr  	= 0x18C.3 
.................... #bit wren    	= 0x18C.2 
.................... #bit wr      	= 0x18C.1 
.................... #bit rd      	= 0x18C.0 
....................  
.................... //ADCON0 
.................... #bit CHS0 	=0x1F.3 
.................... #bit CHS1 	=0x1F.4 
.................... #bit CHS2 	=0x1F.5 
....................  
.................... #FUSES PUT,HS,NOWDT,NOPROTECT,NOLVP 
.................... #use delay(clock=20M) 
*
001A:  MOVLW  2B
001B:  MOVWF  04
001C:  BCF    03.7
001D:  MOVF   00,W
001E:  BTFSC  03.2
001F:  GOTO   02D
0020:  MOVLW  06
0021:  MOVWF  78
0022:  CLRF   77
0023:  DECFSZ 77,F
0024:  GOTO   023
0025:  DECFSZ 78,F
0026:  GOTO   022
0027:  MOVLW  7B
0028:  MOVWF  77
0029:  DECFSZ 77,F
002A:  GOTO   029
002B:  DECFSZ 00,F
002C:  GOTO   020
002D:  RETURN
.................... #use i2c(Master,Fast=100000, sda=PIN_C4, scl=PIN_C3,force_sw) 
002E:  MOVLW  08
002F:  MOVWF  78
0030:  MOVLW  04
0031:  MOVWF  77
0032:  DECFSZ 77,F
0033:  GOTO   032
0034:  BCF    07.3
0035:  BCF    20.3
0036:  MOVF   20,W
0037:  BSF    03.5
0038:  MOVWF  07
0039:  MOVLW  03
003A:  MOVWF  77
003B:  DECFSZ 77,F
003C:  GOTO   03B
003D:  BCF    03.5
003E:  RLF    38,F
003F:  BCF    07.4
0040:  BTFSS  03.0
0041:  GOTO   048
0042:  BSF    20.4
0043:  MOVF   20,W
0044:  BSF    03.5
0045:  MOVWF  07
0046:  GOTO   04C
0047:  BCF    03.5
0048:  BCF    20.4
0049:  MOVF   20,W
004A:  BSF    03.5
004B:  MOVWF  07
004C:  NOP
004D:  BCF    03.5
004E:  BSF    20.3
004F:  MOVF   20,W
0050:  BSF    03.5
0051:  MOVWF  07
0052:  BCF    03.5
0053:  BTFSS  07.3
0054:  GOTO   053
0055:  DECFSZ 78,F
0056:  GOTO   030
0057:  MOVLW  04
0058:  MOVWF  77
0059:  DECFSZ 77,F
005A:  GOTO   059
005B:  BCF    07.3
005C:  BCF    20.3
005D:  MOVF   20,W
005E:  BSF    03.5
005F:  MOVWF  07
0060:  NOP
0061:  BCF    03.5
0062:  BSF    20.4
0063:  MOVF   20,W
0064:  BSF    03.5
0065:  MOVWF  07
0066:  MOVLW  03
0067:  MOVWF  77
0068:  DECFSZ 77,F
0069:  GOTO   068
006A:  MOVLW  03
006B:  MOVWF  77
006C:  DECFSZ 77,F
006D:  GOTO   06C
006E:  BCF    03.5
006F:  BSF    20.3
0070:  MOVF   20,W
0071:  BSF    03.5
0072:  MOVWF  07
0073:  BCF    03.5
0074:  BTFSS  07.3
0075:  GOTO   074
0076:  CLRF   78
0077:  MOVLW  03
0078:  MOVWF  77
0079:  DECFSZ 77,F
007A:  GOTO   079
007B:  BTFSC  07.4
007C:  BSF    78.0
007D:  BCF    07.3
007E:  BCF    20.3
007F:  MOVF   20,W
0080:  BSF    03.5
0081:  MOVWF  07
0082:  BCF    03.5
0083:  BCF    07.4
0084:  BCF    20.4
0085:  MOVF   20,W
0086:  BSF    03.5
0087:  MOVWF  07
0088:  BCF    03.5
0089:  RETURN
.................... #include <i2c_Flex_LCD.c> 
.................... //-----------------------------------------------------------------------------  
.................... // Title:         i2c_Flex_LCD  
.................... // Description:   Driver for common LCD with 1/2/3 or 4 rows by 1...20 columns  
.................... //                using PCF8574T interface board with I2C protocol.  
.................... // Date:          Nov-2013  
.................... // Ver.Rev.:      1.1  
.................... // Author:        Hugo Silva (sergio-hugo@bol.com.br) #Based on the routines of  
.................... //                "20X4_LCD_I2C_DRIVER.h" from Pumrin S. and "lcd4_i2c.c" from XP8100  
.................... //-----------------------------------------------------------------------------  
.................... //  
.................... // lcd_init() Must be called before any other function.  
.................... //  
.................... // lcd_putc(c) Will display c on the next position of the LCD.  
.................... //   
.................... //     \f Clear LCD display  
.................... //     \n Set write position on next lcd line  
.................... //     \b LCD backspace  
.................... //     lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)  
.................... //  
.................... // lcd_backlight_led(ON)/lcd_backlight_led(OFF) = Turn ON/OFF LCD Backlight LED  
.................... //  
.................... //-----------------------------------------------------------------------------  
.................... // LCD pins D0-D3 are not used.  
.................... //-----------------------------------------------------------------------------  
.................... //  
.................... // Comment   : Control of a compatible LCD (1...4 rows by 1...4 columns) from  
.................... //              a bus I2C with an EXPANDER of I/O with connection I2C.  
.................... //              The tests of these routines have been programmed using the IC  
.................... //              Phillips PCF8574T. I've used 4 bits mode programming.  
.................... //              The 8 bits mode programming is possible if you use 2 x PCF8574T.  
.................... //              RW Pin is not being used.  
.................... //  
.................... // As defined in the following structure the pin connection is as follows:  
.................... //  
.................... //  PCF8574P     LCD  
.................... //  ========     ======  
.................... //     P0        RS  
.................... //     P1        RW    (Not used!)  
.................... //     P2        Enable   
.................... //     P3        Led Backlight  
.................... //     P4        D4  
.................... //     P5        D5  
.................... //     P6        D6  
.................... //     P7        D7  
.................... //  
.................... //  The SCL and SDA pins should be pull-up resistor as shown below:  
.................... //  
.................... //             +5v  
.................... //               |  
.................... //               <  
.................... //               > 4.7K         
.................... //               <           
.................... //To PIC         |          To i2c slave  
.................... //pin xx ------------------ SDA pin   
.................... //(SDA)                       
.................... //              +5v  
.................... //               |  
.................... //               <  
.................... //               > 4.7K         
.................... //               <           
.................... //To PIC         |          To i2c slave  
.................... //pin xx ------------------ SCL pin   
.................... //(SCL)  
.................... //  
.................... //To PIC                    To i2c slave  
.................... //Vss pin ----------------- Vss or ground pin   
.................... //                |  
.................... //              -----  
.................... //               ---  Ground  
.................... //                -   
.................... //   
.................... // THIS DOCUMENT IS PROVIDED TO THE USER "AS IS"  
.................... //-----------------------------------------------------------------------------  
.................... byte LCD_ADDR ;//             0x4E        //I2C slave address for LCD module  
.................... byte lcd_total_rows ;//       2           //Number of rows: 1,2,3 or 4  
.................... byte lcd_total_columns ;//    16          //Number of columns: 1...20    
....................  
.................... #define RS                    0b00000001  //P0 - PCF8574T Pin connected to RS  
.................... #define RW                    0b00000010  //P1 - PCF8574T Pin connected to RW  
.................... #define ENABLE                0b00000100  //P2 - PCF8574T Pin connected to EN  
.................... #define LCD_BACKLIGHT         0b00001000  //P3 - PCF8574T Pin connected to BACKLIGHT LED  
....................  
.................... #define addr_row_one          0x00        //LCD RAM address for row 1  
.................... #define addr_row_two          0x40        //LCD RAM address for row 2  
.................... #define addr_row_three        0x14        //LCD RAM address for row 3  
.................... #define addr_row_four         0x54        //LCD RAM address for row 4  
....................  
.................... #define ON                    1  
.................... #define OFF                   0  
.................... #define NOT                   ~  
.................... #define data_shifted          data<<4  
.................... int8 new_row_request=1, BACKLIGHT_LED=LCD_BACKLIGHT;  
....................  
.................... void lcd_backlight_led(byte bl)  
.................... {   
....................       If (bl) BACKLIGHT_LED=LCD_BACKLIGHT; else BACKLIGHT_LED=OFF;  
*
01B7:  MOVF   27,F
01B8:  BTFSC  03.2
01B9:  GOTO   1BD
01BA:  MOVLW  08
01BB:  MOVWF  25
01BC:  GOTO   1BE
01BD:  CLRF   25
.................... }  
01BE:  BCF    0A.3
01BF:  BCF    0A.4
01C0:  GOTO   282 (RETURN)
....................  
.................... void i2c_send_nibble(byte data, byte type)  
.................... {     
....................    switch (type)  
....................    {       
*
008A:  MOVF   36,W
008B:  XORLW  00
008C:  BTFSC  03.2
008D:  GOTO   092
008E:  XORLW  01
008F:  BTFSC  03.2
0090:  GOTO   0B5
0091:  GOTO   0DA
....................       case 0 :       
....................       i2c_write(data_shifted | BACKLIGHT_LED);  
0092:  SWAPF  35,W
0093:  MOVWF  77
0094:  MOVLW  F0
0095:  ANDWF  77,F
0096:  MOVF   77,W
0097:  IORWF  25,W
0098:  MOVWF  37
0099:  MOVWF  38
009A:  CALL   02E
....................       delay_cycles(1);  
009B:  NOP
....................       i2c_write(data_shifted | ENABLE | BACKLIGHT_LED );  
009C:  SWAPF  35,W
009D:  MOVWF  77
009E:  MOVLW  F0
009F:  ANDWF  77,F
00A0:  MOVF   77,W
00A1:  IORLW  04
00A2:  IORWF  25,W
00A3:  MOVWF  37
00A4:  MOVWF  38
00A5:  CALL   02E
....................       delay_us(2);  
00A6:  MOVLW  03
00A7:  MOVWF  77
00A8:  DECFSZ 77,F
00A9:  GOTO   0A8
....................       i2c_write(data_shifted & NOT ENABLE | BACKLIGHT_LED);  
00AA:  SWAPF  35,W
00AB:  MOVWF  77
00AC:  MOVLW  F0
00AD:  ANDWF  77,F
00AE:  MOVF   77,W
00AF:  ANDLW  FB
00B0:  IORWF  25,W
00B1:  MOVWF  37
00B2:  MOVWF  38
00B3:  CALL   02E
....................       break;  
00B4:  GOTO   0DA
....................        
....................       case 1 :  
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED);  
00B5:  SWAPF  35,W
00B6:  MOVWF  77
00B7:  MOVLW  F0
00B8:  ANDWF  77,F
00B9:  MOVF   77,W
00BA:  IORLW  01
00BB:  IORWF  25,W
00BC:  MOVWF  37
00BD:  MOVWF  38
00BE:  CALL   02E
....................       delay_cycles(1);  
00BF:  NOP
....................       i2c_write(data_shifted | RS | ENABLE | BACKLIGHT_LED );  
00C0:  SWAPF  35,W
00C1:  MOVWF  77
00C2:  MOVLW  F0
00C3:  ANDWF  77,F
00C4:  MOVF   77,W
00C5:  IORLW  01
00C6:  IORLW  04
00C7:  IORWF  25,W
00C8:  MOVWF  37
00C9:  MOVWF  38
00CA:  CALL   02E
....................       delay_us(2);  
00CB:  MOVLW  03
00CC:  MOVWF  77
00CD:  DECFSZ 77,F
00CE:  GOTO   0CD
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED);  
00CF:  SWAPF  35,W
00D0:  MOVWF  77
00D1:  MOVLW  F0
00D2:  ANDWF  77,F
00D3:  MOVF   77,W
00D4:  IORLW  01
00D5:  IORWF  25,W
00D6:  MOVWF  37
00D7:  MOVWF  38
00D8:  CALL   02E
....................       break;  
00D9:  GOTO   0DA
....................    }  
.................... }  
00DA:  RETURN
....................      
.................... void lcd_send_byte(byte data, byte type)  
....................    {  
....................         i2c_start();  
00DB:  BSF    20.4
00DC:  MOVF   20,W
00DD:  BSF    03.5
00DE:  MOVWF  07
00DF:  MOVLW  04
00E0:  MOVWF  77
00E1:  DECFSZ 77,F
00E2:  GOTO   0E1
00E3:  BCF    03.5
00E4:  BSF    20.3
00E5:  MOVF   20,W
00E6:  BSF    03.5
00E7:  MOVWF  07
00E8:  MOVLW  03
00E9:  MOVWF  77
00EA:  DECFSZ 77,F
00EB:  GOTO   0EA
00EC:  BCF    03.5
00ED:  BCF    07.4
00EE:  BCF    20.4
00EF:  MOVF   20,W
00F0:  BSF    03.5
00F1:  MOVWF  07
00F2:  MOVLW  04
00F3:  MOVWF  77
00F4:  DECFSZ 77,F
00F5:  GOTO   0F4
00F6:  BCF    03.5
00F7:  BCF    07.3
00F8:  BCF    20.3
00F9:  MOVF   20,W
00FA:  BSF    03.5
00FB:  MOVWF  07
....................         i2c_write(LCD_ADDR);  
00FC:  BCF    03.5
00FD:  MOVF   21,W
00FE:  MOVWF  38
00FF:  CALL   02E
....................         i2c_send_nibble(data >> 4 , type);  
0100:  SWAPF  32,W
0101:  MOVWF  34
0102:  MOVLW  0F
0103:  ANDWF  34,F
0104:  MOVF   34,W
0105:  MOVWF  35
0106:  MOVF   33,W
0107:  MOVWF  36
0108:  CALL   08A
....................         i2c_send_nibble(data & 0xf , type);  
0109:  MOVF   32,W
010A:  ANDLW  0F
010B:  MOVWF  34
010C:  MOVWF  35
010D:  MOVF   33,W
010E:  MOVWF  36
010F:  CALL   08A
....................         i2c_stop();         
0110:  BCF    20.4
0111:  MOVF   20,W
0112:  BSF    03.5
0113:  MOVWF  07
0114:  NOP
0115:  BCF    03.5
0116:  BSF    20.3
0117:  MOVF   20,W
0118:  BSF    03.5
0119:  MOVWF  07
011A:  BCF    03.5
011B:  BTFSS  07.3
011C:  GOTO   11B
011D:  MOVLW  04
011E:  MOVWF  77
011F:  DECFSZ 77,F
0120:  GOTO   11F
0121:  GOTO   122
0122:  NOP
0123:  BSF    20.4
0124:  MOVF   20,W
0125:  BSF    03.5
0126:  MOVWF  07
0127:  MOVLW  04
0128:  MOVWF  77
0129:  DECFSZ 77,F
012A:  GOTO   129
....................    }  
012B:  BCF    03.5
012C:  RETURN
....................  
.................... void lcd_clear()  
.................... {   
....................         lcd_send_byte(0x01,0);  
012D:  MOVLW  01
012E:  MOVWF  32
012F:  CLRF   33
0130:  CALL   0DB
....................         delay_ms(2);  
0131:  MOVLW  02
0132:  MOVWF  2B
0133:  CALL   01A
....................         new_row_request=1;  
0134:  MOVLW  01
0135:  MOVWF  24
.................... }  
0136:  RETURN
....................  
.................... void lcd_init(byte ADDR, byte col, byte row)  
.................... {  
....................    byte i; 
....................    byte CONST lcd_type=2;  // 0=5x7, 1=5x10, 2=2 lines  
....................    byte CONST LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; // These bytes need to be sent to the LCD to start it up. 
....................     
....................    LCD_ADDR =ADDR;//             0x4E        //I2C slave address for LCD module  
0137:  MOVF   27,W
0138:  MOVWF  21
....................    lcd_total_rows =row;//       2           //Number of rows: 1,2,3 or 4  
0139:  MOVF   29,W
013A:  MOVWF  22
....................    lcd_total_columns= col ; 
013B:  MOVF   28,W
013C:  MOVWF  23
....................    disable_interrupts(GLOBAL);  
013D:  BCF    0B.6
013E:  BCF    0B.7
013F:  BTFSC  0B.7
0140:  GOTO   13E
....................    delay_ms(50); //LCD power up delay  
0141:  MOVLW  32
0142:  MOVWF  2B
0143:  CALL   01A
....................      
....................    i2c_start();  
0144:  BSF    20.4
0145:  MOVF   20,W
0146:  BSF    03.5
0147:  MOVWF  07
0148:  MOVLW  04
0149:  MOVWF  77
014A:  DECFSZ 77,F
014B:  GOTO   14A
014C:  BCF    03.5
014D:  BSF    20.3
014E:  MOVF   20,W
014F:  BSF    03.5
0150:  MOVWF  07
0151:  MOVLW  03
0152:  MOVWF  77
0153:  DECFSZ 77,F
0154:  GOTO   153
0155:  BCF    03.5
0156:  BCF    07.4
0157:  BCF    20.4
0158:  MOVF   20,W
0159:  BSF    03.5
015A:  MOVWF  07
015B:  MOVLW  04
015C:  MOVWF  77
015D:  DECFSZ 77,F
015E:  GOTO   15D
015F:  BCF    03.5
0160:  BCF    07.3
0161:  BCF    20.3
0162:  MOVF   20,W
0163:  BSF    03.5
0164:  MOVWF  07
....................    i2c_write(LCD_ADDR);  
0165:  BCF    03.5
0166:  MOVF   21,W
0167:  MOVWF  38
0168:  CALL   02E
....................       i2c_send_nibble(0x00,0);  
0169:  CLRF   35
016A:  CLRF   36
016B:  CALL   08A
....................       delay_ms(15);  
016C:  MOVLW  0F
016D:  MOVWF  2B
016E:  CALL   01A
....................      
....................    for (i=1;i<=3;++i)     
016F:  MOVLW  01
0170:  MOVWF  2A
0171:  MOVF   2A,W
0172:  SUBLW  03
0173:  BTFSS  03.0
0174:  GOTO   17E
....................    {  
....................       i2c_send_nibble(0x03,0);  
0175:  MOVLW  03
0176:  MOVWF  35
0177:  CLRF   36
0178:  CALL   08A
....................       delay_ms(5);  
0179:  MOVLW  05
017A:  MOVWF  2B
017B:  CALL   01A
....................    }     
017C:  INCF   2A,F
017D:  GOTO   171
....................       i2c_send_nibble(0x02,0);  
017E:  MOVLW  02
017F:  MOVWF  35
0180:  CLRF   36
0181:  CALL   08A
....................       delay_ms(5);  
0182:  MOVLW  05
0183:  MOVWF  2B
0184:  CALL   01A
....................    i2c_stop();  
0185:  BCF    20.4
0186:  MOVF   20,W
0187:  BSF    03.5
0188:  MOVWF  07
0189:  NOP
018A:  BCF    03.5
018B:  BSF    20.3
018C:  MOVF   20,W
018D:  BSF    03.5
018E:  MOVWF  07
018F:  BCF    03.5
0190:  BTFSS  07.3
0191:  GOTO   190
0192:  MOVLW  04
0193:  MOVWF  77
0194:  DECFSZ 77,F
0195:  GOTO   194
0196:  GOTO   197
0197:  NOP
0198:  BSF    20.4
0199:  MOVF   20,W
019A:  BSF    03.5
019B:  MOVWF  07
019C:  MOVLW  04
019D:  MOVWF  77
019E:  DECFSZ 77,F
019F:  GOTO   19E
....................      
....................    for (i=0;i<=3;++i) {  
01A0:  BCF    03.5
01A1:  CLRF   2A
01A2:  MOVF   2A,W
01A3:  SUBLW  03
01A4:  BTFSS  03.0
01A5:  GOTO   1B1
....................    lcd_send_byte(LCD_INIT_STRING[i],0);  
01A6:  MOVF   2A,W
01A7:  CALL   004
01A8:  MOVWF  2B
01A9:  MOVWF  32
01AA:  CLRF   33
01AB:  CALL   0DB
....................    delay_ms(5);  
01AC:  MOVLW  05
01AD:  MOVWF  2B
01AE:  CALL   01A
....................    }  
01AF:  INCF   2A,F
01B0:  GOTO   1A2
....................    lcd_clear();  //Clear Display  
01B1:  CALL   12D
....................    enable_interrupts(GLOBAL);  
01B2:  MOVLW  C0
01B3:  IORWF  0B,F
.................... }  
01B4:  BCF    0A.3
01B5:  BCF    0A.4
01B6:  GOTO   27F (RETURN)
....................  
.................... void lcd_gotoxy( byte x, byte y)  
.................... {  
.................... byte row,column,row_addr,lcd_address;  
.................... static char data;  
*
0277:  CLRF   26
....................  
....................    if (y>lcd_total_rows) row=lcd_total_rows; else row=y;  
*
01C1:  MOVF   2C,W
01C2:  SUBWF  22,W
01C3:  BTFSC  03.0
01C4:  GOTO   1C8
01C5:  MOVF   22,W
01C6:  MOVWF  2D
01C7:  GOTO   1CA
01C8:  MOVF   2C,W
01C9:  MOVWF  2D
....................    
....................    switch(row)  
....................    {  
01CA:  MOVF   2D,W
01CB:  XORLW  01
01CC:  BTFSC  03.2
01CD:  GOTO   1D8
01CE:  XORLW  03
01CF:  BTFSC  03.2
01D0:  GOTO   1DA
01D1:  XORLW  01
01D2:  BTFSC  03.2
01D3:  GOTO   1DD
01D4:  XORLW  07
01D5:  BTFSC  03.2
01D6:  GOTO   1E0
01D7:  GOTO   1E3
....................       case 1:  row_addr=addr_row_one;     break;  
01D8:  CLRF   2F
01D9:  GOTO   1E5
....................       case 2:  row_addr=addr_row_two;     break;  
01DA:  MOVLW  40
01DB:  MOVWF  2F
01DC:  GOTO   1E5
....................       case 3:  row_addr=addr_row_three;   break;  
01DD:  MOVLW  14
01DE:  MOVWF  2F
01DF:  GOTO   1E5
....................       case 4:  row_addr=addr_row_four;    break;  
01E0:  MOVLW  54
01E1:  MOVWF  2F
01E2:  GOTO   1E5
....................       default: row_addr=addr_row_one;     break;   
01E3:  CLRF   2F
01E4:  GOTO   1E5
....................    }   
....................      
....................    if (x>lcd_total_columns) column=lcd_total_columns; else column=x;   
01E5:  MOVF   2B,W
01E6:  SUBWF  23,W
01E7:  BTFSC  03.0
01E8:  GOTO   1EC
01E9:  MOVF   23,W
01EA:  MOVWF  2E
01EB:  GOTO   1EE
01EC:  MOVF   2B,W
01ED:  MOVWF  2E
....................    lcd_address=(row_addr+(column-1));  
01EE:  MOVLW  01
01EF:  SUBWF  2E,W
01F0:  ADDWF  2F,W
01F1:  MOVWF  30
....................    lcd_send_byte(0x80|lcd_address,0);  
01F2:  MOVF   30,W
01F3:  IORLW  80
01F4:  MOVWF  31
01F5:  MOVWF  32
01F6:  CLRF   33
01F7:  CALL   0DB
.................... }  
01F8:  RETURN
....................  
.................... //Display the character on LCD screen.  
.................... void LCD_PUTC(char in_data)  
.................... {     
....................   switch(in_data)  
....................    {   
01F9:  MOVF   2A,W
01FA:  XORLW  0C
01FB:  BTFSC  03.2
01FC:  GOTO   204
01FD:  XORLW  06
01FE:  BTFSC  03.2
01FF:  GOTO   206
0200:  XORLW  02
0201:  BTFSC  03.2
0202:  GOTO   213
0203:  GOTO   218
....................      case '\f': lcd_clear();                       break;                 
0204:  CALL   12D
0205:  GOTO   21E
....................        
....................      case '\n':  
....................      new_row_request++;  
0206:  INCF   24,F
....................      if (new_row_request>lcd_total_rows) new_row_request=1;  
0207:  MOVF   24,W
0208:  SUBWF  22,W
0209:  BTFSC  03.0
020A:  GOTO   20D
020B:  MOVLW  01
020C:  MOVWF  24
....................      lcd_gotoxy(1, new_row_request);  
020D:  MOVLW  01
020E:  MOVWF  2B
020F:  MOVF   24,W
0210:  MOVWF  2C
0211:  CALL   1C1
....................      break;  
0212:  GOTO   21E
....................                    
....................      case '\b': lcd_send_byte(0x10,0);             break;  
0213:  MOVLW  10
0214:  MOVWF  32
0215:  CLRF   33
0216:  CALL   0DB
0217:  GOTO   21E
....................          
....................      default: lcd_send_byte(in_data,1);            break;       
0218:  MOVF   2A,W
0219:  MOVWF  32
021A:  MOVLW  01
021B:  MOVWF  33
021C:  CALL   0DB
021D:  GOTO   21E
....................        
....................    }  
.................... }  
021E:  RETURN
....................  
....................  
.................... void main() 
.................... { 
*
0265:  CLRF   04
0266:  BCF    03.7
0267:  MOVLW  1F
0268:  ANDWF  03,F
0269:  MOVLW  01
026A:  MOVWF  24
026B:  MOVLW  08
026C:  MOVWF  25
026D:  BSF    03.5
026E:  BSF    1F.0
026F:  BSF    1F.1
0270:  BSF    1F.2
0271:  BCF    1F.3
0272:  MOVLW  07
0273:  MOVWF  1C
....................    lcd_init(0x4E,16,2);  //khoi dong lcd dia chi 0x4E 
*
0278:  MOVLW  4E
0279:  MOVWF  27
027A:  MOVLW  10
027B:  MOVWF  28
027C:  MOVLW  02
027D:  MOVWF  29
027E:  GOTO   137
....................    lcd_backlight_led(ON); //bat led nen lcd 
027F:  MOVLW  01
0280:  MOVWF  27
0281:  GOTO   1B7
....................    set_tris_B(0x00); 
0282:  MOVLW  00
0283:  BSF    03.5
0284:  MOVWF  06
....................    while(TRUE) 
....................    { 
....................       lcd_gotoxy(1, 1); 
0285:  MOVLW  01
0286:  BCF    03.5
0287:  MOVWF  2B
0288:  MOVWF  2C
0289:  CALL   1C1
....................       printf(lcd_putc, "NGUYEN QUOC ANH"); 
028A:  MOVLW  0C
028B:  BSF    03.6
028C:  MOVWF  0D
028D:  MOVLW  00
028E:  MOVWF  0F
028F:  BCF    03.6
0290:  CALL   21F
....................       lcd_gotoxy(1, 2); 
0291:  MOVLW  01
0292:  MOVWF  2B
0293:  MOVLW  02
0294:  MOVWF  2C
0295:  CALL   1C1
....................       printf(lcd_putc, "LE VI KHANG"); 
0296:  MOVLW  14
0297:  BSF    03.6
0298:  MOVWF  0D
0299:  MOVLW  00
029A:  MOVWF  0F
029B:  BCF    03.6
029C:  CALL   21F
....................  
....................    } 
029D:  BSF    03.5
029E:  GOTO   285
.................... } 
029F:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
