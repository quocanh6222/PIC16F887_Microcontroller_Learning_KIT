CCS PCM C Compiler, Version 4.104, 5967               29-Dec-23 07:29

               Filename: D:\UNIVERSITY\NAM_4_2023_2024\HKI\TTTT_DO_AN_KY_THUAT_DIEU_KHIEN\CODE_TEST\LED_7_DOAN\LED_7_DOAN.lst

               ROM used: 332 words (4%)
                         Largest free fragment is 2048
               RAM used: 28 (8%) at main() level
                         38 (10%) worst case
               Stack:    1 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   085
0003:  NOP
.................... #include <16F887.h> 
.................... //////// Standard Header file for the PIC16F887 device //////////////// 
.................... #device PIC16F887 
.................... #list 
....................  
.................... #include <def_887.h> 
.................... // register definitions 
....................  
.................... #define W 0 
.................... #define F 1 
....................  
.................... // register files 
.................... #byte INDF          =0x00 
.................... #byte TMR0          =0x01 
.................... #byte PCL           =0x02 
.................... #byte STATUS        =0x03 
.................... #byte FSR           =0x04 
.................... #byte PORTA         =0x05 
.................... #byte PORTB         =0x06 
.................... #byte PORTC         =0x07 
.................... #byte PORTD         =0x08 
.................... #byte PORTE         =0x09 
....................  
.................... #byte EEDATA        =0x10C 
.................... #byte EEADR         =0x10D 
.................... #byte EEDATH        =0x10E 
.................... #byte EEADRH         =0x10F 
.................... #byte ADCON0     =0x1F 
.................... #byte ADCON1     =0x9F 
.................... #byte ADRESH     =0x9F 
.................... #byte ADSESL     =0x9F 
....................  
.................... #byte PCLATH        =0x0a 
.................... #byte INTCON        =0x0b 
.................... #byte PIR1    =0x0c 
.................... #byte PIR2    =0x0d 
.................... #byte PIE1    =0x8c 
.................... #byte PIE2    =0x8d 
....................  
.................... #byte OPTION_REG    =0x81 
.................... #byte TRISA         =0x85 
.................... #byte TRISB         =0x86 
.................... #byte TRISC         =0x87 
.................... #byte TRISD         =0x88 
.................... #byte TRISE         =0x89 
....................  
.................... #byte EECON1        =0x18C 
.................... #byte EECON2        =0x18D 
....................  
.................... //DINH NGHIA BIT 
.................... #bit ra5   =0x05.5 
.................... #bit ra4   =0x05.4 
.................... #bit ra3   =0x05.3 
.................... #bit ra2   =0x05.2 
.................... #bit ra1   =0x05.1 
.................... #bit ra0   =0x05.0 
....................  
.................... #bit rb7   =0x06.7 
.................... #bit rb6   =0x06.6 
.................... #bit rb5   =0x06.5 
.................... #bit rb4   =0x06.4 
.................... #bit rb3   =0x06.3 
.................... #bit rb2   =0x06.2 
.................... #bit rb1   =0x06.1 
.................... #bit rb0   =0x06.0 
....................  
.................... #bit rC7   =0x07.7 
.................... #bit rC6   =0x07.6 
.................... #bit rC5   =0x07.5 
.................... #bit rC4   =0x07.4 
.................... #bit rC3   =0x07.3 
.................... #bit rC2   =0x07.2 
.................... #bit rC1   =0x07.1 
.................... #bit rC0   =0x07.0 
....................  
.................... #bit rD7   =0x08.7 
.................... #bit rD6   =0x08.6 
.................... #bit rD5   =0x08.5 
.................... #bit rD4   =0x08.4 
.................... #bit rD3   =0x08.3 
.................... #bit rD2   =0x08.2 
.................... #bit rD1   =0x08.1 
.................... #bit rD0   =0x08.0 
....................  
.................... #bit rE2   =0x09.2 
.................... #bit rE1   =0x09.1 
.................... #bit rE0   =0x09.0 
....................  
....................  
.................... #bit trisa5   =0x85.5 
.................... #bit trisa4   =0x85.4 
.................... #bit trisa3   =0x85.3 
.................... #bit trisa2   =0x85.2 
.................... #bit trisa1   =0x85.1 
.................... #bit trisa0   =0x85.0 
....................  
.................... #bit trisb7   =0x86.7 
.................... #bit trisb6   =0x86.6 
.................... #bit trisb5   =0x86.5 
.................... #bit trisb4   =0x86.4 
.................... #bit trisb3   =0x86.3 
.................... #bit trisb2   =0x86.2 
.................... #bit trisb1   =0x86.1 
.................... #bit trisb0   =0x86.0 
....................  
.................... #bit trisc7   =0x87.7 
.................... #bit trisc6   =0x87.6 
.................... #bit trisc5   =0x87.5 
.................... #bit trisc4   =0x87.4 
.................... #bit trisc3   =0x87.3 
.................... #bit trisc2   =0x87.2 
.................... #bit trisc1   =0x87.1 
.................... #bit trisc0   =0x87.0 
....................  
.................... #bit trisd7   =0x88.7 
.................... #bit trisd6   =0x88.6 
.................... #bit trisd5   =0x88.5 
.................... #bit trisd4   =0x88.4 
.................... #bit trisd3   =0x88.3 
.................... #bit trisd2   =0x88.2 
.................... #bit trisd1   =0x88.1 
.................... #bit trisd0   =0x88.0 
....................  
.................... #bit trise2   =0x89.2 
.................... #bit trise1   =0x89.1 
.................... #bit trise0   =0x89.0 
....................  
.................... // INTCON Bits for C 
.................... #bit gie    = 0x0b.7 
.................... #bit peie = 0x0b.6 
.................... #bit tmr0ie = 0x0b.5 
.................... #bit int0ie = 0x0b.4 
.................... #bit rbie   = 0x0b.3 
.................... #bit tmr0if    = 0x0b.2 
.................... #bit int0if    = 0x0b.1 
.................... #bit rbif    = 0x0b.0 
....................  
.................... // PIR1 for C 
.................... #bit pspif  = 0x0c.7 
.................... #bit adif    = 0x0c.6 
.................... #bit rcif    = 0x0c.5 
.................... #bit txif    = 0x0c.4 
.................... #bit sspif    = 0x0c.3 
.................... #bit ccp1if    = 0x0c.2 
.................... #bit tmr2if    = 0x0c.1 
.................... #bit tmr1if    = 0x0c.0 
....................  
.................... //PIR2 for C 
.................... #bit cmif    = 0x0d.6 
.................... #bit eeif    = 0x0d.4 
.................... #bit bclif  = 0x0d.3 
.................... #bit ccp2if    = 0x0d.0 
....................  
.................... // PIE1 for C 
.................... #bit adie    = 0x8c.6 
.................... #bit rcie    = 0x8c.5 
.................... #bit txie    = 0x8c.4 
.................... #bit sspie    = 0x8c.3 
.................... #bit ccp1ie    = 0x8c.2 
.................... #bit tmr2ie    = 0x8c.1 
.................... #bit tmr1ie    = 0x8c.0 
....................  
.................... //PIE2 for C 
.................... #bit osfie    = 0x8d.7 
.................... #bit cmie    = 0x8d.6 
.................... #bit eeie   = 0x8d.4 
....................  
.................... // OPTION Bits 
.................... #bit not_rbpu   = 0x81.7 
.................... #bit intedg     = 0x81.6 
.................... #bit t0cs       = 0x81.5 
.................... #bit t0se       = 0x81.4 
.................... #bit psa        = 0x81.3 
.................... #bit ps2        = 0x81.2 
.................... #bit ps1        = 0x81.1 
.................... #bit ps0        = 0x81.0 
....................  
.................... // EECON1 Bits 
.................... #bit eepgd   = 0x18c.7 
.................... #bit free      = 0x18C.4 
.................... #bit wrerr     = 0x18C.3 
.................... #bit wren       = 0x18C.2 
.................... #bit wr         = 0x18C.1 
.................... #bit rd         = 0x18C.0 
....................  
.................... //ADCON0 
.................... #bit CHS0    =0x1F.3 
.................... #bit CHS1    =0x1F.4 
.................... #bit CHS2    =0x1F.5 
....................  
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP 
.................... #use delay(clock=20000000) 
*
0071:  MOVLW  33
0072:  MOVWF  04
0073:  BCF    03.7
0074:  MOVF   00,W
0075:  BTFSC  03.2
0076:  GOTO   084
0077:  MOVLW  06
0078:  MOVWF  78
0079:  CLRF   77
007A:  DECFSZ 77,F
007B:  GOTO   07A
007C:  DECFSZ 78,F
007D:  GOTO   079
007E:  MOVLW  7B
007F:  MOVWF  77
0080:  DECFSZ 77,F
0081:  GOTO   080
0082:  DECFSZ 00,F
0083:  GOTO   077
0084:  RETURN
.................... unsigned int8 ma7doan[]= {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90}; 
*
0098:  MOVLW  C0
0099:  BCF    03.6
009A:  MOVWF  20
009B:  MOVLW  F9
009C:  MOVWF  21
009D:  MOVLW  A4
009E:  MOVWF  22
009F:  MOVLW  B0
00A0:  MOVWF  23
00A1:  MOVLW  99
00A2:  MOVWF  24
00A3:  MOVLW  92
00A4:  MOVWF  25
00A5:  MOVLW  82
00A6:  MOVWF  26
00A7:  MOVLW  F8
00A8:  MOVWF  27
00A9:  MOVLW  80
00AA:  MOVWF  28
00AB:  MOVLW  90
00AC:  MOVWF  29
.................... signed int32 i, j; 
....................  
.................... void main(){ 
*
0085:  CLRF   04
0086:  BCF    03.7
0087:  MOVLW  1F
0088:  ANDWF  03,F
0089:  BSF    03.5
008A:  BSF    03.6
008B:  MOVF   09,W
008C:  ANDLW  C0
008D:  MOVWF  09
008E:  BCF    03.6
008F:  BCF    1F.4
0090:  BCF    1F.5
0091:  MOVLW  00
0092:  BSF    03.6
0093:  MOVWF  08
0094:  BCF    03.5
0095:  CLRF   07
0096:  CLRF   08
0097:  CLRF   09
.................... trisc = 0x00; 
*
00AF:  BSF    03.5
00B0:  CLRF   07
.................... trisd = 0x00; 
00B1:  CLRF   08
.................... while(1) 
.................... { 
.................... for(i = 0; i<=99; i++){ 
00B2:  BCF    03.5
00B3:  CLRF   2D
00B4:  CLRF   2C
00B5:  CLRF   2B
00B6:  CLRF   2A
00B7:  BTFSC  2D.7
00B8:  GOTO   0C6
00B9:  MOVF   2D,F
00BA:  BTFSS  03.2
00BB:  GOTO   14A
00BC:  MOVF   2C,F
00BD:  BTFSS  03.2
00BE:  GOTO   14A
00BF:  MOVF   2B,F
00C0:  BTFSS  03.2
00C1:  GOTO   14A
00C2:  MOVF   2A,W
00C3:  SUBLW  63
00C4:  BTFSS  03.0
00C5:  GOTO   14A
....................  
....................    for(j = 0; j<25; j++){ 
00C6:  CLRF   31
00C7:  CLRF   30
00C8:  CLRF   2F
00C9:  CLRF   2E
00CA:  BTFSC  31.7
00CB:  GOTO   0D9
00CC:  MOVF   31,F
00CD:  BTFSS  03.2
00CE:  GOTO   141
00CF:  MOVF   30,F
00D0:  BTFSS  03.2
00D1:  GOTO   141
00D2:  MOVF   2F,F
00D3:  BTFSS  03.2
00D4:  GOTO   141
00D5:  MOVF   2E,W
00D6:  SUBLW  18
00D7:  BTFSS  03.0
00D8:  GOTO   141
....................       output_high(PIN_C0); 
00D9:  BCF    32.0
00DA:  MOVF   32,W
00DB:  BSF    03.5
00DC:  MOVWF  07
00DD:  BCF    03.5
00DE:  BSF    07.0
....................       output_d(ma7doan[i/10]); 
00DF:  MOVF   2D,W
00E0:  MOVWF  36
00E1:  MOVF   2C,W
00E2:  MOVWF  35
00E3:  MOVF   2B,W
00E4:  MOVWF  34
00E5:  MOVF   2A,W
00E6:  MOVWF  33
00E7:  CLRF   3A
00E8:  CLRF   39
00E9:  CLRF   38
00EA:  MOVLW  0A
00EB:  MOVWF  37
00EC:  CALL   004
00ED:  MOVLW  20
00EE:  ADDWF  77,W
00EF:  MOVWF  04
00F0:  BCF    03.7
00F1:  BTFSC  78.0
00F2:  BSF    03.7
00F3:  MOVF   00,W
00F4:  MOVWF  33
00F5:  BSF    03.5
00F6:  CLRF   08
00F7:  BCF    03.5
00F8:  MOVF   33,W
00F9:  MOVWF  08
....................       delay_ms(10); 
00FA:  MOVLW  0A
00FB:  MOVWF  33
00FC:  CALL   071
....................       output_low(PIN_C0);  
00FD:  BCF    32.0
00FE:  MOVF   32,W
00FF:  BSF    03.5
0100:  MOVWF  07
0101:  BCF    03.5
0102:  BCF    07.0
....................        
....................       output_high(PIN_C1);  
0103:  BCF    32.1
0104:  MOVF   32,W
0105:  BSF    03.5
0106:  MOVWF  07
0107:  BCF    03.5
0108:  BSF    07.1
....................       output_d(ma7doan[i%10]); 
0109:  MOVF   2D,W
010A:  MOVWF  36
010B:  MOVF   2C,W
010C:  MOVWF  35
010D:  MOVF   2B,W
010E:  MOVWF  34
010F:  MOVF   2A,W
0110:  MOVWF  33
0111:  CLRF   3A
0112:  CLRF   39
0113:  CLRF   38
0114:  MOVLW  0A
0115:  MOVWF  37
0116:  CALL   004
0117:  MOVF   00,W
0118:  MOVWF  33
0119:  INCF   04,F
011A:  MOVF   00,W
011B:  MOVWF  34
011C:  INCF   04,F
011D:  MOVF   00,W
011E:  MOVWF  35
011F:  INCF   04,F
0120:  MOVF   00,W
0121:  MOVWF  36
0122:  MOVLW  20
0123:  ADDWF  33,W
0124:  MOVWF  04
0125:  BCF    03.7
0126:  BTFSC  34.0
0127:  BSF    03.7
0128:  MOVF   00,W
0129:  MOVWF  33
012A:  BSF    03.5
012B:  CLRF   08
012C:  BCF    03.5
012D:  MOVF   33,W
012E:  MOVWF  08
....................       delay_ms(10);   
012F:  MOVLW  0A
0130:  MOVWF  33
0131:  CALL   071
....................       output_low(PIN_C1); 
0132:  BCF    32.1
0133:  MOVF   32,W
0134:  BSF    03.5
0135:  MOVWF  07
0136:  BCF    03.5
0137:  BCF    07.1
....................    } 
0138:  MOVLW  01
0139:  ADDWF  2E,F
013A:  BTFSC  03.0
013B:  INCF   2F,F
013C:  BTFSC  03.2
013D:  INCF   30,F
013E:  BTFSC  03.2
013F:  INCF   31,F
0140:  GOTO   0CA
.................... }}} 
0141:  MOVLW  01
0142:  ADDWF  2A,F
0143:  BTFSC  03.0
0144:  INCF   2B,F
0145:  BTFSC  03.2
0146:  INCF   2C,F
0147:  BTFSC  03.2
0148:  INCF   2D,F
0149:  GOTO   0B7
014A:  GOTO   0B3
014B:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   NOWRT BORV40
